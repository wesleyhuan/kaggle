{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":114239,"databundleVersionId":14210809,"sourceType":"competition"}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Introduction\n\n----------------------\n\nThis notebook include step by step thought process. It's to help myself clear every potential problem.\n\nIn this competition what we need to **generate prediction models for player movement during the frames when the ball is in the air.**\n\nBasic steps include:\n\n1. Load and explore data\n2. Data visualization\n3. Preprocess and clean data\n4. Choose the right model\n5. Tune and Optimize\n6. Deploy the model and submit the result\n\n----------------------","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\n\nfrom concurrent.futures import ThreadPoolExecutor, as_completed, ProcessPoolExecutor\nfrom tqdm import tqdm\nimport torch\nimport os, glob\n\nfrom scipy.spatial import KDTree","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:29.002294Z","iopub.execute_input":"2025-10-28T16:18:29.003020Z","iopub.status.idle":"2025-10-28T16:18:29.007259Z","shell.execute_reply.started":"2025-10-28T16:18:29.002998Z","shell.execute_reply":"2025-10-28T16:18:29.006641Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# Set up GPU\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Device:\", DEVICE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:29.008626Z","iopub.execute_input":"2025-10-28T16:18:29.008855Z","iopub.status.idle":"2025-10-28T16:18:29.025418Z","shell.execute_reply.started":"2025-10-28T16:18:29.008839Z","shell.execute_reply":"2025-10-28T16:18:29.024849Z"}},"outputs":[{"name":"stdout","text":"Device: cuda\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"# congif\nDATA_DIR = \"/kaggle/input/nfl-big-data-bowl-2026-prediction/\"\nTRAIN_PATH = DATA_DIR + '/train'\nWEEKS = list(range(1, 12))\n# For reproducibility\nRANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:29.026047Z","iopub.execute_input":"2025-10-28T16:18:29.026235Z","iopub.status.idle":"2025-10-28T16:18:29.038245Z","shell.execute_reply.started":"2025-10-28T16:18:29.026222Z","shell.execute_reply":"2025-10-28T16:18:29.037655Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"# Load data\n\nWith multithread read csv will speed up multiple file opening\n\nThis is from someone else code I will link the source if find the link again","metadata":{}},{"cell_type":"code","source":"def load_weeks_parallel(week_nums, train_path, max_workers=8):\n    def load_week(w):\n        inp = pd.read_csv(train_path + f\"/input_2023_w{w:02d}.csv\")\n        out = pd.read_csv(train_path + f\"/output_2023_w{w:02d}.csv\")\n        return w, inp, out\n\n    inputs, outputs = [], []\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:#multi thread\n        futures = {executor.submit(load_week, w): w for w in week_nums}\n        for future in tqdm(as_completed(futures), total=len(futures), desc=\"Loading weeks\"):#- Uses tqdm to show a progress bar as each thread finishes\n            w, inp, out = future.result()\n            inputs.append(inp)\n            outputs.append(out)\n\n    return pd.concat(inputs, ignore_index=True), pd.concat(outputs, ignore_index=True)\n\ndf_in, df_out = load_weeks_parallel(WEEKS, TRAIN_PATH, max_workers=8)\nprint(f\"Data loaded: {len(df_in)} input rows, {df_in['game_id'].nunique()} games\")\nprint(f\"Data loaded: {len(df_out)} output rows, {df_out['game_id'].nunique()} games\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:29.038984Z","iopub.execute_input":"2025-10-28T16:18:29.039279Z","iopub.status.idle":"2025-10-28T16:18:33.824088Z","shell.execute_reply.started":"2025-10-28T16:18:29.039262Z","shell.execute_reply":"2025-10-28T16:18:33.823415Z"}},"outputs":[{"name":"stderr","text":"Loading weeks: 100%|██████████| 11/11 [00:04<00:00,  2.62it/s]\n","output_type":"stream"},{"name":"stdout","text":"Data loaded: 2941176 input rows, 164 games\nData loaded: 336358 output rows, 164 games\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"print(df_in.shape)\nprint(df_out.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:33.825880Z","iopub.execute_input":"2025-10-28T16:18:33.826199Z","iopub.status.idle":"2025-10-28T16:18:33.830440Z","shell.execute_reply.started":"2025-10-28T16:18:33.826182Z","shell.execute_reply":"2025-10-28T16:18:33.829611Z"}},"outputs":[{"name":"stdout","text":"(2941176, 23)\n(336358, 6)\n","output_type":"stream"}],"execution_count":23},{"cell_type":"markdown","source":"# Check data for basic info\nCheck what data we are about to handle to know what we should do to preprocess data","metadata":{}},{"cell_type":"code","source":"print(df_in.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:33.831139Z","iopub.execute_input":"2025-10-28T16:18:33.831327Z","iopub.status.idle":"2025-10-28T16:18:33.852153Z","shell.execute_reply.started":"2025-10-28T16:18:33.831310Z","shell.execute_reply":"2025-10-28T16:18:33.851535Z"}},"outputs":[{"name":"stdout","text":"      game_id  play_id  player_to_predict  nfl_id  frame_id play_direction  \\\n0  2023101900       78              False   54514         1          right   \n1  2023101900       78              False   54514         2          right   \n2  2023101900       78              False   54514         3          right   \n3  2023101900       78              False   54514         4          right   \n4  2023101900       78              False   54514         5          right   \n\n   absolute_yardline_number     player_name player_height  player_weight  ...  \\\n0                        35  Alontae Taylor           6-0            195  ...   \n1                        35  Alontae Taylor           6-0            195  ...   \n2                        35  Alontae Taylor           6-0            195  ...   \n3                        35  Alontae Taylor           6-0            195  ...   \n4                        35  Alontae Taylor           6-0            195  ...   \n\n          player_role      x      y     s     a     dir       o  \\\n0  Defensive Coverage  38.30  18.62  0.14  0.17  210.10  277.45   \n1  Defensive Coverage  38.31  18.58  0.30  0.25  183.01  278.61   \n2  Defensive Coverage  38.32  18.54  0.36  0.16  172.37  278.61   \n3  Defensive Coverage  38.35  18.55  0.26  0.05  146.71  278.61   \n4  Defensive Coverage  38.38  18.54  0.27  0.05  128.83  278.61   \n\n   num_frames_output  ball_land_x  ball_land_y  \n0                 12    44.080002    47.619999  \n1                 12    44.080002    47.619999  \n2                 12    44.080002    47.619999  \n3                 12    44.080002    47.619999  \n4                 12    44.080002    47.619999  \n\n[5 rows x 23 columns]\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"print(df_in.keys())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:33.852877Z","iopub.execute_input":"2025-10-28T16:18:33.853136Z","iopub.status.idle":"2025-10-28T16:18:33.865943Z","shell.execute_reply.started":"2025-10-28T16:18:33.853115Z","shell.execute_reply":"2025-10-28T16:18:33.865344Z"}},"outputs":[{"name":"stdout","text":"Index(['game_id', 'play_id', 'player_to_predict', 'nfl_id', 'frame_id',\n       'play_direction', 'absolute_yardline_number', 'player_name',\n       'player_height', 'player_weight', 'player_birth_date',\n       'player_position', 'player_side', 'player_role', 'x', 'y', 's', 'a',\n       'dir', 'o', 'num_frames_output', 'ball_land_x', 'ball_land_y'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":25},{"cell_type":"markdown","source":"The input data contains tracking data before the pass is thrown\n\n* game_id: Game identifier, unique (numeric)\n* play_id: Play identifier, not unique across games (numeric)\n* player_to_predict: whether or not the x/y prediction for this player will be scored (bool)\n* nfl_id: Player identification number, unique across players (numeric)\n* frame_id: Frame identifier for each play/type, starting at 1 for each game_id/play_id/file type (input or output) (numeric)\n* play_direction: Direction that the offense is moving (left or right)\n* absolute_yardline_number: Distance from end zone for possession team (numeric)\n* player_name: player name (text)\n* player_height: player height (ft-in)\n* player_weight: player weight (lbs)\n* player_birth_date: birth date (yyyy-mm-dd)\n* player_position: the player's position (the specific role on the field that they typically play)\n* player_side: team player is on (Offense or Defense)\n* player_role: role player has on play (Defensive Coverage, Targeted Receiver, Passer or Other Route Runner)\n* x: Player position along the long axis of the field, generally within 0 - 120 yards. (numeric)\n* y: Player position along the short axis of the field, generally within 0 - 53.3 yards. (numeric)\n* s: Speed in yards/second (numeric)\n* a: Acceleration in yards/second^2 (numeric)\n* o: orientation of player (deg)\n* dir: angle of player motion (deg)\n* num_frames_output: Number of frames to predict in output data for the given game_id/play_id/nfl_id. (numeric)\n* ball_land_x: Ball landing position position along the long axis of the field, generally within 0 - 120 yards. (numeric)\n* ball_land_y: Ball landing position along the short axis of the field, generally within 0 - 53.3 yards. (numeric)","metadata":{}},{"cell_type":"code","source":"print(df_out.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:33.866569Z","iopub.execute_input":"2025-10-28T16:18:33.866806Z","iopub.status.idle":"2025-10-28T16:18:33.884047Z","shell.execute_reply.started":"2025-10-28T16:18:33.866771Z","shell.execute_reply":"2025-10-28T16:18:33.883463Z"}},"outputs":[{"name":"stdout","text":"      game_id  play_id  nfl_id  frame_id      x      y\n0  2023101900       78   44851         1  45.00  39.84\n1  2023101900       78   44851         2  44.95  40.28\n2  2023101900       78   44851         3  44.86  40.74\n3  2023101900       78   44851         4  44.74  41.24\n4  2023101900       78   44851         5  44.59  41.77\n","output_type":"stream"}],"execution_count":26},{"cell_type":"markdown","source":"The output data contains tracking data after the pass is thrown.\n* game_id: Game identifier, unique (numeric)\n* play_id: Play identifier, not unique across games (numeric)\n* nfl_id: Player identification number, unique across players. (numeric)\n* frame_id: Frame identifier for each play/type, starting at 1 for each game_id/play_id/ file type (input or output). The maximum value for a given game_id, play_id and nfl_id will be the same as the num_frames_output value from the corresponding input file. (numeric)\n* x: Player position along the long axis of the field, generally within 0-120 yards. (TARGET TO PREDICT)\n* y: Player position along the short axis of the field, generally within 0 - 53.3 yards. (TARGET TO PREDICT)","metadata":{}},{"cell_type":"markdown","source":"# Data Visualization and basic analyze","metadata":{}},{"cell_type":"markdown","source":"There are some feature might not have any infuence to the result such as game_id, play_id, player_name, nfl_id \n\nBecause the prediction will no be influence by what game or play even player.\n\nSo we are going to visualize some data and analyze it","metadata":{}},{"cell_type":"code","source":"# Display information about the datasets\nprint(\"Train data shape\")\nprint(df_in.shape)\nprint(\"Test data shape\")\nprint(df_out.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:33.884803Z","iopub.execute_input":"2025-10-28T16:18:33.885286Z","iopub.status.idle":"2025-10-28T16:18:33.899180Z","shell.execute_reply.started":"2025-10-28T16:18:33.885264Z","shell.execute_reply":"2025-10-28T16:18:33.898626Z"}},"outputs":[{"name":"stdout","text":"Train data shape\n(2941176, 23)\nTest data shape\n(336358, 6)\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# check if there is any missing data in it\ndf_in.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:33.899806Z","iopub.execute_input":"2025-10-28T16:18:33.900027Z","iopub.status.idle":"2025-10-28T16:18:34.873450Z","shell.execute_reply.started":"2025-10-28T16:18:33.900013Z","shell.execute_reply":"2025-10-28T16:18:34.872621Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"game_id                     0\nplay_id                     0\nplayer_to_predict           0\nnfl_id                      0\nframe_id                    0\nplay_direction              0\nabsolute_yardline_number    0\nplayer_name                 0\nplayer_height               0\nplayer_weight               0\nplayer_birth_date           0\nplayer_position             0\nplayer_side                 0\nplayer_role                 0\nx                           0\ny                           0\ns                           0\na                           0\ndir                         0\no                           0\nnum_frames_output           0\nball_land_x                 0\nball_land_y                 0\ndtype: int64"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"# absolute_yardline_number, x, y, s, a\n# Create subplots \nfig, axs = plt.subplots(1, 5, figsize=(15, 4))  # 1 row, 5 columns\n\naxs[0].hist(df_in['absolute_yardline_number'], bins=20, color='blue', edgecolor='black')\naxs[0].set_title('absolute_yardline_number')\n\naxs[1].hist(df_in['x'], bins=20, color='blue', edgecolor='black')\naxs[1].set_title('x')\n\naxs[2].hist(df_in['y'], bins=20, color='blue', edgecolor='black')\naxs[2].set_title('y')\n\naxs[3].hist(df_in['s'], bins=10, color='blue', edgecolor='black')\naxs[3].set_title('Speed in yards/second ')\n\naxs[4].hist(df_in['a'], bins=10, color='blue', edgecolor='black')\naxs[4].set_title('Acceleration in yards/second^2')\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:34.874294Z","iopub.execute_input":"2025-10-28T16:18:34.875052Z","iopub.status.idle":"2025-10-28T16:18:35.879343Z","shell.execute_reply.started":"2025-10-28T16:18:34.875031Z","shell.execute_reply":"2025-10-28T16:18:35.878587Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x400 with 5 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":29},{"cell_type":"markdown","source":"I can tell that player always in the middle of field and the play alway close to 25 yards from graph of \"Distance from end zone for possession team\"\n\nSo I think all the numeric data above seems reasonable.","metadata":{}},{"cell_type":"code","source":"# dir,o,num_frames_output,ball_land_x,ball_land_y\n# Create subplots \nfig, axs = plt.subplots(1, 5, figsize=(15, 4))  # 1 row, 5 columns\n\naxs[0].hist(df_in['dir'], bins=36, color='blue', edgecolor='black')\naxs[0].set_title('dir')\n\naxs[1].hist(df_in['o'], bins=36, color='blue', edgecolor='black')\naxs[1].set_title('o')\n\naxs[2].hist(df_in['num_frames_output'], bins=20, color='blue', edgecolor='black')\naxs[2].set_title('num_frames_output')\n\naxs[3].hist(df_in['ball_land_x'], bins=20, color='blue', edgecolor='black')\naxs[3].set_title('ball_land_x')\n\naxs[4].hist(df_in['ball_land_y'], bins=20, color='blue', edgecolor='black')\naxs[4].set_title('ball_land_y')\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:35.880184Z","iopub.execute_input":"2025-10-28T16:18:35.880455Z","iopub.status.idle":"2025-10-28T16:18:37.064918Z","shell.execute_reply.started":"2025-10-28T16:18:35.880432Z","shell.execute_reply":"2025-10-28T16:18:37.064276Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x400 with 5 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":30},{"cell_type":"markdown","source":"# Encode the data\n\n_________________\n\n\nBecause some data is not number and it can not be recognize by model.\n\nWe have to encode it so that machine learning model can process it.\n\n\n\n________________","metadata":{}},{"cell_type":"code","source":"# play_direction,player_side,player_position,player_role\n#following feature need to be encode with \"Label Encodeing\"\n\nfrom sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\nplay_direction_encoded = encoder.fit_transform(df_in[\"play_direction\"])\nplayer_side_encoded = encoder.fit_transform(df_in[\"player_side\"])\nplayer_position_encoded = encoder.fit_transform(df_in[\"player_position\"])\nplayer_role_encoded = encoder.fit_transform(df_in[\"player_role\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:37.065689Z","iopub.execute_input":"2025-10-28T16:18:37.065958Z","iopub.status.idle":"2025-10-28T16:18:38.785937Z","shell.execute_reply.started":"2025-10-28T16:18:37.065936Z","shell.execute_reply":"2025-10-28T16:18:38.785371Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"# Create subplots \nfig, axs = plt.subplots(1, 4, figsize=(15, 4))  # 1 row, 5 columns\n\naxs[0].hist(play_direction_encoded, bins=2, color='blue', edgecolor='black')\naxs[0].set_title('play_direction')\n\naxs[1].hist(player_side_encoded, bins=2, color='blue', edgecolor='black')\naxs[1].set_title('player_side')\n\naxs[2].hist(player_position_encoded, bins=5, color='blue', edgecolor='black')\naxs[2].set_title('player_position')\n\naxs[3].hist(player_role_encoded, bins=5, color='blue', edgecolor='black')\naxs[3].set_title('player_role')\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:38.788202Z","iopub.execute_input":"2025-10-28T16:18:38.788416Z","iopub.status.idle":"2025-10-28T16:18:39.611040Z","shell.execute_reply.started":"2025-10-28T16:18:38.788401Z","shell.execute_reply":"2025-10-28T16:18:39.610346Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x400 with 4 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABdEAAAGGCAYAAACUkchWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABkaElEQVR4nO3dfVyUVf7/8Tc3MmiKZgiKoajlXRoSriyaq24UkdG6baurpmRpm8lm8mtLMkVzk27MaFvNstTaMi1Lt01XK4zcir6uGmWF5A2GuYKSKYoKCef3R8vUxIwyCHPDvJ6Px/XIOXPOzOfMNfOZ04drrsvPGGMEAAAAAAAAAABq8Xd3AAAAAAAAAAAAeCqK6AAAAAAAAAAAOEARHQAAAAAAAAAAByiiAwAAAAAAAADgAEV0AAAAAAAAAAAcoIgOAAAAAAAAAIADFNEBAAAAAAAAAHCAIjoAAAAAAAAAAA5QRAcAAAAAAAAAwAGK6HC5qKgo3XLLLe4Owy4/Pz/Nnj3benv58uXy8/PTvn373BbTz3liTABwNp6c9xvaz79HHJk9e7b8/PwaPyAA+AlfyscNzZk1eE5Ojvz8/JSTk9PocQFAffB98IN9+/bJz89Py5cvd3co8AIU0QEPNW/ePK1du9bdYQAAAACwY9GiRRReAADwERTRgbMYN26cTp06pc6dO7v8uR0V0d0ZEwDg7E6dOqUHHnjA3WEAABqYvTW4oyL6r371K506dUq/+tWvXBghAABoTIHuDgDwZAEBAQoICDhrH2OMTp8+rebNm3tMTACAujlz5oyqq6sVFBTUII8XHBzcII8DAL6mofNxQ3NmDe7v78/3AQDU0/l8H7i6PgPfwpHoaDA153fduXOnRo4cqZCQEF100UWaOnWqTp8+7XDckSNHdM8996hv375q2bKlQkJClJSUpE8//dTa58SJE7rgggs0derUWuO/+eYbBQQEKDMzs86xVlRUaNq0aWrXrp1atWqlG264Qd98802tfvbOfRgVFaXrr79eGzduVP/+/dW8eXM988wzkqSjR4/q7rvvVmRkpCwWiy655BI98sgjqq6utnnc6upqPfnkk+rbt6+Cg4PVrl07XXvttdq6daukH86pW15erhdeeEF+fn7y8/Oznq/M0fkYFy1apMsuu0wWi0URERGaMmWKjh49atNn6NCh6tOnj7788ksNGzZMLVq0UMeOHfXoo4/W+bUDgBqelPfrkn9rznk4f/58ZWVlqVu3brJYLPryyy/rNN+tW7cqMTFRoaGhat68ubp06aJbb73Vpo+9c6J/8MEH+sUvfqHg4GB169bN+p1hz0svvaTY2Fg1b95cbdu21R/+8Aft37+/TvEB8F2+lo9r1uNvv/22+vXrp+DgYPXu3VtvvPFGrb579+7V73//e7Vt21YtWrTQL3/5S61bt65Wv6eeekqXXXaZWrRooQsvvFD9+/fXihUrrPf/fA0eFRWlL774Qu+//751vT506FBJjs+J/tprr1lzfGhoqG6++WYdOHDAps8tt9yili1b6sCBAxoxYoRatmypdu3a6Z577lFVVVWdXh8AvstXvw/s1Wfqmv/t2blzp2666Sa1bdtWwcHB6t+/v9588806jUXTxZHoaHAjR45UVFSUMjMz9fHHH+uvf/2rvvvuO7344ot2++/du1dr167V73//e3Xp0kUlJSV65plnNGTIEH355ZeKiIhQy5Yt9dvf/larVq3SggULbI4CeeWVV2SM0dixY+sc48SJE/XSSy9pzJgxGjhwoDZt2qThw4fXeXxBQYFGjx6tP/7xj5o0aZJ69OihkydPasiQITpw4ID++Mc/qlOnTvroo4+Unp6ugwcPKisryzr+tttu0/Lly5WUlKSJEyfqzJkz+ve//62PP/5Y/fv319///ndNnDhRAwYM0O233y5J6tatm8N4Zs+erTlz5ighIUGTJ09WQUGBnn76af3nP//Rhx9+qGbNmln7fvfdd7r22mt14403auTIkVq9erXuu+8+9e3bV0lJSXV+DQCghrvzvjP5V5KWLVum06dP6/bbb5fFYlHbtm3POcdDhw7pmmuuUbt27TR9+nS1adNG+/bts1uw+akdO3ZYx82ePVtnzpxRRkaGwsPDa/V96KGHNHPmTI0cOVITJ07U4cOH9dRTT+lXv/qVPvnkE7Vp0+accQLwbb6Qj2vs2rVLo0aN0h133KGUlBQtW7ZMv//977VhwwZdffXVkqSSkhINHDhQJ0+e1F133aWLLrpIL7zwgm644QatXr1av/3tbyVJS5Ys0V133aWbbrrJWmj67LPP9H//938aM2aM3efPysrSn/70J7Vs2VIzZsyQJLu5vcby5cs1YcIE/eIXv1BmZqZKSkr05JNP6sMPP6yV46uqqpSYmKi4uDjNnz9f7777rh5//HF169ZNkydPrvNrBMB3+dL3gb36TF3zvz1ffPGFBg0apI4dO2r69Om64IIL9Oqrr2rEiBF6/fXXzzoWTZwBGkhGRoaRZG644Qab9jvvvNNIMp9++qkxxpjOnTublJQU6/2nT582VVVVNmMKCwuNxWIxDz74oLVt48aNRpL517/+ZdP38ssvN0OGDKlznHl5eUaSufPOO23ax4wZYySZjIwMa9uyZcuMJFNYWGht69y5s5FkNmzYYDN+7ty55oILLjBfffWVTfv06dNNQECAKSoqMsYYs2nTJiPJ3HXXXbViq66utv77ggsusHmdHMV06NAhExQUZK655hqb1/Fvf/ubkWSWLl1qbRsyZIiRZF588UVrW0VFhWnfvr353e9+V+u5AOBsPCXv1zX/FhYWGkkmJCTEHDp0yKm5rlmzxkgy//nPf87a7+ffIyNGjDDBwcHm66+/trZ9+eWXJiAgwPx0GbZv3z4TEBBgHnroIZvH27FjhwkMDKzVDgA/5Uv5uGYekszrr79ubTt27Jjp0KGDiYmJsbbdfffdRpL597//bW07fvy46dKli4mKirLO/Te/+Y257LLLzvqc9v6/4LLLLrP7/yHvvfeekWTee+89Y4wxlZWVJiwszPTp08ecOnXK2u+tt94yksysWbOsbSkpKUaSzetvjDExMTEmNjb2rDECgK9+H/y8PlPX/F/z/MuWLbP2u+qqq0zfvn3N6dOnrW3V1dVm4MCB5tJLL3U6RjQdnM4FDW7KlCk2t//0pz9JktavX2+3v8Vikb//D2/Fqqoqffvtt2rZsqV69Oih7du3W/slJCQoIiJCL7/8srXt888/12effaabb765zvHVxHHXXXfZtN999911fowuXbooMTHRpu21117T4MGDdeGFF6q0tNS6JSQkqKqqSps3b5Ykvf766/Lz81NGRkatx/Xz86tzDDXeffddVVZW6u6777a+jpI0adIkhYSE1Pq5UsuWLW1er6CgIA0YMEB79+51+rkBQHJ/3q9r/q3xu9/9Tu3atXNqjjVHCL711lv6/vvv6zSmqqpKGzdu1IgRI9SpUydre69evWp9h7zxxhuqrq7WyJEjbebQvn17XXrppXrvvfeciheAb/KFfFwjIiLC5mjAkJAQjR8/Xp988omKi4ut8x4wYICuvPJKa7+W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vVr79u1TaGiohg0bpnHjxumvf/2rdu3apWuvvVbV1dX697//rWHDhik1NVWSFBsbq3fffVcLFixQRESEunTpori4uFrP265dO6Wnp2vOnDm69tprdcMNN6igoECLFi3SL37xC6cuugp4AvK593F33q9r/j0fL7zwghYtWqTf/va36tatm44fP64lS5YoJCRE1113ncNxc+bM0YYNGzR48GDdeeedOnPmjJ566ilddtll+uyzz6z9unXrpr/85S9KT0/Xvn37NGLECLVq1UqFhYVas2aNbr/9dt1zzz3nNQfAlcjl7uEL+bhG9+7dddttt+k///mPwsPDtXTpUpWUlGjZsmXWPtOnT9crr7yipKQk3XXXXWrbtq1eeOEFFRYW6vXXX7deRO+aa65R+/btNWjQIIWHhys/P19/+9vfNHz4cLVq1cphDLGxsXr66af1l7/8RZdcconCwsJqHWku/XBE4yOPPKIJEyZoyJAhGj16tEpKSvTkk08qKipK06ZNa5DXBGho5HLv5UvfB/bUNf/bs3DhQl155ZXq27evJk2apK5du6qkpES5ubn65ptv9OmnnzZa3PBwxktJMmvWrLHefuutt4wkc8EFF9hsgYGBZuTIkcYYYyZNmmQkmYKCAuu4bdu2GUlm586drp5Ck5ORkWEkmS+//NLcdNNNplWrVubCCy80qamp5tSpU9Z+nTt3NikpKdbbp0+fNv/v//0/06FDB9O8eXMzaNAgk5uba4YMGWKGDBli97muu+46I8l89NFH9Yr11KlT5q677jIXXXSRueCCC0xycrLZv3+/kWQyMjKs/ZYtW2YkmcLCQpv4hw8fbvdxjx8/btLT080ll1xigoKCTGhoqBk4cKCZP3++qaystPY7c+aMeeyxx0zPnj1NUFCQadeunUlKSjLbtm2z9tm5c6f51a9+ZZo3b24kWV8zezEZY8zf/vY307NnT9OsWTMTHh5uJk+ebL777jubPkOGDDGXXXZZrbhTUlJM586d6/TaAQ2NfO69PCnv1yX/FhYWGknmsccec3qu27dvN6NHjzadOnUyFovFhIWFmeuvv95s3brVpt/Pv0eMMeb99983sbGxJigoyHTt2tUsXrzY+tr93Ouvv26uvPJK6/u+Z8+eZsqUKTbvdcATkcvdy5fycc08hg8fbjZu3Gguv/xyY7FYTM+ePc1rr71W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wIABZsqUKdbbVVVVJiIiwmRmZtrtP3LkSDN8+HCbtri4OPPHP/6xUeNsCM7O9efOnDljWrVqZV544YXGCrHB1GeuZ86cMQMHDjTPPfecSUlJ8Zqii7Nzffrpp03Xrl1NZWWlq0JsMM7OdcqUKebXv/61TVtaWpoZNGhQo8bZ0OqyWLj33nvNZZddZtM2atQok5iY2IiReRbyOfm8Bvnc8/liPieX101Ty+WHDh0yksz777/vsM+yZctM69atXRfUOWRkZJjo6Og69/f0fVBj6tSpplu3bqa6utru/Z62H36eM6qrq0379u3NY489Zm07evSosVgs5pVXXnH4OOe7Zjgfdcl7W7ZsMZLM119/7bCPs+/JhuSoiO7s2sKd+8EdmkIud3YOnpZDfq4prEOcKaJ/9913LompPuqyNvDEz8RPeeP6xp4LL7zQPPfcc3bva6x94LWnc6msrNS2bduUkJBgbfP391dCQoJyc3PtjsnNzbXpL0mJiYkO+3uK+sz1506ePKnvv/9ebdu2bawwG0R95/rggw8qLCxMt912myvCbBD1meubb76p+Ph4TZkyReHh4erTp4/mzZunqqoqV4VdL/WZ68CBA7Vt2zbrz+727t2r9evX67rrrnNJzK7krbmpoZDPyec/RT4nn3srb81LDaUp5vJjx45J0jnz7YkTJ9S5c2dFRkbqN7/5jb744gtXhOfQrl27FBERoa5du2rs2LEqKipy2NfT94H0w3vrpZde0q233io/Pz+H/TxtP/xUYWGhiouLbV7r1q1bKy4uzuFr3RBrhsZ27Ngx+fn5qU2bNmft58x70hVycnIUFhamHj16aPLkyfr2228d9vWG/dCQmkIur+8+8+QcUheeth/OR79+/dShQwddffXV+vDDD90djo26rA08fV946/qmRlVVlVauXKny8nLFx8fb7dNY+8Bri+ilpaWqqqpSeHi4TXt4eLjD8yUVFxc71d9T1GeuP3ffffcpIiKi1pvI09Rnrh988IGef/55LVmyxBUhNpj6zHXv3r1avXq1qqqqtH79es2cOVOPP/64/vKXv7gi5Hqrz1zHjBmjBx98UFdeeaWaNWumbt26aejQobr//vtdEbJLOcpNZWVlOnXqlJuich3yOfm8BvmcfO7NyOVNK5dXV1fr7rvv1qBBg9SnTx+H/Xr06KGlS5fqH//4h156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\n"},"metadata":{}}],"execution_count":32},{"cell_type":"markdown","source":"# Parameter transfer\n\nplayer_height: player height (ft-in)\n\nplayer_weight: player weight (lbs)\n\nplayer_birth_date: birth date (yyyy-mm-dd)","metadata":{}},{"cell_type":"code","source":"#tranfer player_height\ndef to_meters(h):\n    try:\n        a, b = str(h).split(\"-\")\n        total_inches = float(a) * 12.0 + float(b)\n        return total_inches * 0.0254\n    except Exception:\n        return np.nan\n        \n#tranfer player_birth_date to age\ndef to_age(birth_date_str, reference_year=2026):\n    try:\n        birth_date = datetime.strptime(birth_date_str, \"%Y-%m-%d\")\n        age = reference_year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))\n        return age\n    except Exception:\n        return None  # or np.nan if you're working with pandas\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:23:08.980696Z","iopub.execute_input":"2025-10-28T16:23:08.980988Z","iopub.status.idle":"2025-10-28T16:23:08.986217Z","shell.execute_reply.started":"2025-10-28T16:23:08.980967Z","shell.execute_reply":"2025-10-28T16:23:08.985555Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"# tranfer player_height into meter\n# Step 1: Convert inch to meters\nh_meters = df_in['player_height'].map(to_meters)\n# Step 2: Compute the average of valid height\naverage_height_m = h_meters.mean()\n# Step 3: Fill missing values with the average\nh_meters = h_meters.fillna(average_height_m)\n\n# tranfer player_weight into kilo\n# Step 1: Convert to numeric (in pounds), coerce errors to NaN\nw_lb = pd.to_numeric(df_in['player_weight'], errors='coerce')\n# Step 2: Convert pounds to kilograms\nw_kg = w_lb * 0.453592\n# Step 3: Compute the average of valid weights (in kg)\naverage_kg = w_kg.mean()\n# Step 4: Fill missing values with the average\nw_kg = w_kg.fillna(average_kg)\n\n# tranfer player_birth_date into age\ny_age = df_in['player_birth_date'].map(to_age)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:23:10.140657Z","iopub.execute_input":"2025-10-28T16:23:10.141156Z","iopub.status.idle":"2025-10-28T16:23:27.306349Z","shell.execute_reply.started":"2025-10-28T16:23:10.141133Z","shell.execute_reply":"2025-10-28T16:23:27.305738Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"print(df_in['player_birth_date'])\nprint(y_age)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:23:27.307330Z","iopub.execute_input":"2025-10-28T16:23:27.307536Z","iopub.status.idle":"2025-10-28T16:23:27.313711Z","shell.execute_reply.started":"2025-10-28T16:23:27.307519Z","shell.execute_reply":"2025-10-28T16:23:27.312939Z"}},"outputs":[{"name":"stdout","text":"0          1998-12-03\n1          1998-12-03\n2          1998-12-03\n3          1998-12-03\n4          1998-12-03\n              ...    \n2941171    1997-02-05\n2941172    1997-02-05\n2941173    1997-02-05\n2941174    1997-02-05\n2941175    1997-02-05\nName: player_birth_date, Length: 2941176, dtype: object\n0          None\n1          None\n2          None\n3          None\n4          None\n           ... \n2941171    None\n2941172    None\n2941173    None\n2941174    None\n2941175    None\nName: player_birth_date, Length: 2941176, dtype: object\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"# Create subplots \nfig, axs = plt.subplots(1, 3, figsize=(15, 4))  # 1 row, 5 columns\n\naxs[0].hist(h_meters, bins=20, color='blue', edgecolor='black')\naxs[0].set_title('player_height(m)')\n\naxs[1].hist(w_kg, bins=20, color='blue', edgecolor='black')\naxs[1].set_title('player_weight(kg)')\n\naxs[2].hist(y_age, bins=20, color='blue', edgecolor='black')\naxs[2].set_title('player_age')\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:56.899266Z","iopub.execute_input":"2025-10-28T16:18:56.899515Z","iopub.status.idle":"2025-10-28T16:18:57.886193Z","shell.execute_reply.started":"2025-10-28T16:18:56.899494Z","shell.execute_reply":"2025-10-28T16:18:57.885046Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_37/4115316824.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0maxs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'player_weight(kg)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0maxs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_age\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'black'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0maxs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'player_age'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1445\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1446\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1447\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1448\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mhist\u001b[0;34m(self, x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, **kwargs)\u001b[0m\n\u001b[1;32m   6761\u001b[0m                     \u001b[0;31m# python's min/max ignore nan,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6762\u001b[0m                     \u001b[0;31m# np.minnan returns nan for all nan input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6763\u001b[0;31m                     \u001b[0mxmin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6764\u001b[0m                     \u001b[0mxmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6765\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mxmin\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mxmax\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Only happens if we have seen a finite value.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/lib/nanfunctions.py\u001b[0m in \u001b[0;36mnanmin\u001b[0;34m(a, axis, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m    348\u001b[0m         \u001b[0;31m# Slow, but safe for subclasses of ndarray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    349\u001b[0m         \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_replace_nan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 350\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mamin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    351\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    352\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36mamin\u001b[0;34m(a, axis, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m   2968\u001b[0m     \u001b[0mndarray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mequivalent\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2969\u001b[0m     \"\"\"\n\u001b[0;32m-> 2970\u001b[0;31m     return _wrapreduction(a, np.minimum, 'min', axis, None, out,\n\u001b[0m\u001b[1;32m   2971\u001b[0m                           keepdims=keepdims, initial=initial, where=where)\n\u001b[1;32m   2972\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapreduction\u001b[0;34m(obj, ufunc, method, axis, dtype, out, **kwargs)\u001b[0m\n\u001b[1;32m     86\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mreduction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpasskwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mufunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpasskwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '<=' not supported between instances of 'NoneType' and 'NoneType'"],"ename":"TypeError","evalue":"'<=' not supported between instances of 'NoneType' and 'NoneType'","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x400 with 3 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":35},{"cell_type":"markdown","source":"It seems like that player height might have a little bit weird spot.","metadata":{}},{"cell_type":"markdown","source":"# Preprocess data\n\nWith the analyze above we know there are some preprocess we need to do with data\n\nEncode, Unit conversion","metadata":{}},{"cell_type":"code","source":"# numeric data\n# dir,o,num_frames_output,ball_land_x,ball_land_y\n# absolute_yardline_number, x, y, s, a\n\n# data need encode\n# play_direction,player_side,player_position,player_role\n\n# Parameter transfer\n# player_height, player_weight, player_birth_date\ndef preprocess_player_data(df_in: pd.DataFrame) -> pd.DataFrame:\n    df = df_in.copy()\n\n    # --- Height to meters ---\n    h_meters = df['player_height'].map(to_meters)\n    df['player_height_m'] = h_meters.fillna(h_meters.mean())\n\n    # --- Weight to kilograms ---\n    w_lb = pd.to_numeric(df['player_weight'], errors='coerce')\n    w_kg = w_lb * 0.453592\n    df['player_weight_kg'] = w_kg.fillna(w_kg.mean())\n\n    # --- Birth date to age ---\n    df['player_age'] = df['player_birth_date'].map(lambda x: to_age(x, reference_year=2025))\n\n    # --- Label Encoding ---\n    for col in ['play_direction', 'player_side', 'player_position', 'player_role']:\n        if col in df.columns:\n            encoder = LabelEncoder()\n            df[f\"{col}_encoded\"] = encoder.fit_transform(df[col].astype(str).fillna(\"\"))\n\n    # --- Fill missing numeric values with column mean ---\n    numeric_cols = [\n        'absolute_yardline_number', 'x', 'y', 's', 'a', 'dir', 'o',\n        'num_frames_output', 'ball_land_x', 'ball_land_y'\n    ]\n    for col in numeric_cols:\n        if col in df.columns:\n            df[col] = pd.to_numeric(df[col], errors='coerce')\n            df[col] = df[col].fillna(df[col].mean())\n\n    return df\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:57.886749Z","iopub.status.idle":"2025-10-28T16:18:57.887023Z","shell.execute_reply.started":"2025-10-28T16:18:57.886905Z","shell.execute_reply":"2025-10-28T16:18:57.886917Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Coordinate & Direction Normalization Function\n\nThe goal is to transform all coordinates and angles so that the team on the offense/kicking side is always moving from left-to-right (increasing $x$). We'll assume the field runs from $x=0$ to $x=120$.","metadata":{}},{"cell_type":"code","source":"def normalize_field_coordinates(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Normalizes coordinates (x, y) and directional features (o, dir) \n    such that the play is always moving from left to right (increasing x).\n    \"\"\"\n    df_copy = df.copy()\n    \n    # 1. Identify plays moving \"left\"\n    # A 'left' play means the offense is moving towards x=0 (the left goal line)\n    is_play_left = df_copy['play_direction'] == 'left'\n    \n    # --- A. Coordinate Transformation (x, y) ---\n    # If the play is moving 'left', we mirror the x-coordinate across the 50-yard line \n    # to simulate movement from left-to-right (0 to 120).\n    df_copy.loc[is_play_left, 'x'] = 120 - df_copy.loc[is_play_left, 'x']\n    # The y-coordinate (sideline-to-sideline) can also be mirrored for consistency, \n    # though it's less common than x-mirroring unless the intent is to normalize \n    # player-relative y. Let's keep it simple and only mirror y if we also mirror x\n    # (i.e., flip the whole field relative to the center).\n    # NOTE: Sideline y coordinates typically run 0-53.3, but we'll only mirror x \n    # unless you decide to normalize y later. For now, we only mirror x.\n    \n    # The 'absolute_yardline_number' (where 0 is the offense's own endzone) \n    # should also be mirrored if it's based on the absolute side of the field.\n    # However, since x is now 0-120 and covers the field, we can often drop \n    # this feature or derive it from the new 'x'.\n    df_copy.loc[is_play_left, 'absolute_yardline_number'] = 120 - df_copy.loc[is_play_left, 'absolute_yardline_number']\n\n    # --- B. Direction/Orientation Transformation (dir, o) ---\n     s\n    # 'o' (Orientation) and 'dir' (Direction) are angles (0 to 360 degrees) \n    # where 90 degrees is towards the offense's right goal line (increasing x)\n    # and 270 degrees is towards the left goal line (decreasing x).\n\n    # For 'left' plays, we need to flip the direction/orientation by 180 degrees.\n    # New Angle = (Old Angle + 180) % 360\n    \n    # 1. Flip 'o' (Orientation)\n    df_copy.loc[is_play_left, 'o'] = (df_copy.loc[is_play_left, 'o'] + 180) % 360\n    \n    # 2. Flip 'dir' (Movement Direction)\n    df_copy.loc[is_play_left, 'dir'] = (df_copy.loc[is_play_left, 'dir'] + 180) % 360\n    \n    # After normalization, all plays will have the same reference frame.\n    # You can now drop the original 'play_direction' feature.\n    df_copy = df_copy.drop(columns=['play_direction'])\n\n    return df_copy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:57.888040Z","iopub.status.idle":"2025-10-28T16:18:57.888352Z","shell.execute_reply.started":"2025-10-28T16:18:57.888178Z","shell.execute_reply":"2025-10-28T16:18:57.888194Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Assuming df_in is the original dataframe\ndf_in_normalized = normalize_field_coordinates(df_in)\n# Now continue with your existing preprocessing on df_in_normalized\ndf_processed = preprocess_player_data(df_in_normalized)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:57.889509Z","iopub.status.idle":"2025-10-28T16:18:57.889805Z","shell.execute_reply.started":"2025-10-28T16:18:57.889665Z","shell.execute_reply":"2025-10-28T16:18:57.889679Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This is likely the single most important feature group for your model. It tells the model how close each player is to the target location at every frame.","metadata":{}},{"cell_type":"code","source":"def add_landing_spot_features(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Calculates the distance and angle from each player to the ball's landing spot.\n    \"\"\"\n    df_copy = df.copy()\n    \n    # Calculate difference in x and y\n    dx = df_copy['ball_land_x'] - df_copy['x']\n    dy = df_copy['ball_land_y'] - df_copy['y']\n    \n    # --- Feature 1: Distance to Landing Spot ---\n    # This is the straight-line Euclidean distance\n    df_copy['dist_to_land_spot'] = np.sqrt(dx**2 + dy**2)\n    \n    # --- Feature 2: Angle to Landing Spot ---\n    # Angle in radians, then converted to degrees (0-360)\n    # This tells the model *where* the landing spot is relative to the player\n    angle_rad = np.arctan2(dy, dx)\n    angle_deg = np.degrees(angle_rad)\n    df_copy['angle_to_land_spot'] = (angle_deg + 360) % 360 # Ensure 0-360 range\n\n    return df_copy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:57.890656Z","iopub.status.idle":"2025-10-28T16:18:57.890889Z","shell.execute_reply.started":"2025-10-28T16:18:57.890757Z","shell.execute_reply":"2025-10-28T16:18:57.890765Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This is also fundamental. It's similar to the above, but it calculates each player's distance to the ball's current position in that specific frame. This is crucial for understanding play development.","metadata":{}},{"cell_type":"code","source":"def add_ball_relative_features(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Calculates the distance from each player to the ball's current position\n    in each frame.\n    \"\"\"\n    df_copy = df.copy()\n    \n    # --- Step 1: Get ball's (x, y) for each frame ---\n    # We assume the ball is the row where 'nfl_id' is null\n    df_ball_coords = df_copy.loc[df_copy['nfl_id'].isnull(), [\n        'game_id', 'play_id', 'frame_id', 'x', 'y'\n    ]].rename(columns={'x': 'ball_x', 'y': 'ball_y'})\n    \n    if df_ball_coords.empty:\n        print(\"Warning: No ball data found (nfl_id.isnull()).\")\n        return df_copy\n\n    # --- Step 2: Merge ball coordinates back onto the main dataframe ---\n    # This will add 'ball_x' and 'ball_y' to every row, matching on frame.\n    df_merged = pd.merge(df_copy, df_ball_coords, \n                         on=['game_id', 'play_id', 'frame_id'], \n                         how='left')\n    \n    # --- Step 3: Calculate distance ---\n    dx = df_merged['ball_x'] - df_merged['x']\n    dy = df_merged['ball_y'] - df_merged['y']\n    \n    # 'dist_to_ball' will be 0 for the ball's own row, and a value for all players\n    df_merged['dist_to_ball'] = np.sqrt(dx**2 + dy**2)\n    \n    # We can also get the angle to the ball\n    angle_rad = np.arctan2(dy, dx)\n    angle_deg = np.degrees(angle_rad)\n    df_merged['angle_to_ball'] = (angle_deg + 360) % 360\n\n    return df_merged","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:57.891320Z","iopub.status.idle":"2025-10-28T16:18:57.891546Z","shell.execute_reply.started":"2025-10-28T16:18:57.891444Z","shell.execute_reply":"2025-10-28T16:18:57.891455Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"3. Advanced: Player-to-Player Features (Nearest Opponent/Teammate)\nThis is a very powerful, but computationally expensive, set of features. It involves finding the distance to the nearest opponent and nearest teammate for every player in every frame. This is the best way to quantify pressure, spacing, and blocking support.","metadata":{}},{"cell_type":"code","source":"def add_nearest_neighbor_features(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Calculates distance to nearest opponent and teammate for each player.\n    Uses KDTree for efficient lookup.\n    \n    NOTE: This function is computationally intensive and will take time.\n    \"\"\"\n    # This function operates on a single frame (a group)\n    def _get_frame_distances(frame_group):\n        # Separate players from the ball\n        players = frame_group[frame_group['nfl_id'].notnull()]\n        if players.shape[0] < 2:\n            return frame_group # Not enough players to compare\n        \n        # Split by side (e.g., offense/defense)\n        side_one = players[players['player_side'] == 'offense']\n        side_two = players[players['player_side'] == 'defense']\n        \n        # Initialize distances as NaN\n        frame_group['dist_to_nearest_opponent'] = np.nan\n        frame_group['dist_to_nearest_teammate'] = np.nan\n        \n        # --- 1. Nearest Opponent ---\n        if not side_one.empty and not side_two.empty:\n            # Build trees\n            tree_one = KDTree(side_one[['x', 'y']])\n            tree_two = KDTree(side_two[['x', 'y']])\n            \n            # Query tree_two for nearest neighbors to side_one\n            dist_one, _ = tree_two.query(side_one[['x', 'y']], k=1)\n            # Query tree_one for nearest neighbors to side_two\n            dist_two, _ = tree_one.query(side_two[['x', 'y']], k=1)\n            \n            # Assign back to the group\n            frame_group.loc[side_one.index, 'dist_to_nearest_opponent'] = dist_one\n            frame_group.loc[side_two.index, 'dist_to_nearest_opponent'] = dist_two\n\n        # --- 2. Nearest Teammate ---\n        # (We need k=2 because k=1 will be the player itself)\n        if side_one.shape[0] > 1:\n            tree_one = KDTree(side_one[['x', 'y']])\n            dist_one_team, _ = tree_one.query(side_one[['x', 'y']], k=2)\n            frame_group.loc[side_one.index, 'dist_to_nearest_teammate'] = dist_one_team[:, 1] # Get 2nd col\n            \n        if side_two.shape[0] > 1:\n            tree_two = KDTree(side_two[['x', 'y']])\n            dist_two_team, _ = tree_two.query(side_two[['x', 'y']], k=2)\n            frame_group.loc[side_two.index, 'dist_to_nearest_teammate'] = dist_two_team[:, 1] # Get 2nd col\n\n        return frame_group\n\n    print(\"Starting nearest neighbor feature calculation... (This may take a while)\")\n    # Group by each frame and apply the function\n    # We must use 'apply' here, which can be slow.\n    df_copy = df.groupby(['game_id', 'play_id', 'frame_id'], \n                         group_keys=False).apply(_get_frame_distances)\n    print(\"Nearest neighbor features complete.\")\n    return df_copy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:57.892687Z","iopub.status.idle":"2025-10-28T16:18:57.893038Z","shell.execute_reply.started":"2025-10-28T16:18:57.892867Z","shell.execute_reply":"2025-10-28T16:18:57.892882Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# --- 1. Load Data ---\n# (You already have this)\n# df_in, df_out = load_weeks_parallel(WEEKS, TRAIN_PATH)\n\n# --- 2. Normalize Coordinates ---\n# (From previous step)\n# df_in_normalized = normalize_field_coordinates(df_in)\n\n# --- 3. Preprocess Base Features ---\n# (Your 'preprocess_player_data' function)\n# df_processed = preprocess_player_data(df_in_normalized)\n\n# --- 4. Add Relative Features (Start simple, then add) ---\n\n# Start with the most important ones\nprint(\"Adding landing spot features...\")\ndf_feat = add_landing_spot_features(df_processed)\n\nprint(\"Adding ball-relative features...\")\ndf_feat = add_ball_relative_features(df_feat)\n\n# --- 5. (Optional but Recommended) Add Advanced Features ---\n# This is slow, so maybe run it once and save the result\n# df_feat = add_nearest_neighbor_features(df_feat)\n# df_feat.to_parquet('preprocessed_features_with_neighbors.parquet')\n\nprint(\"Feature engineering complete.\")\nprint(df_feat.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T16:18:57.894649Z","iopub.status.idle":"2025-10-28T16:18:57.894998Z","shell.execute_reply.started":"2025-10-28T16:18:57.894824Z","shell.execute_reply":"2025-10-28T16:18:57.894840Z"}},"outputs":[],"execution_count":null}]}