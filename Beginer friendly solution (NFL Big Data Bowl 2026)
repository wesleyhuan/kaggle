{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":114239,"databundleVersionId":13825858,"sourceType":"competition"}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Introduction\n\n----------------------\n\nThis notebook include step by step thought process. It's to help myself clear every potential problem.\n\nIn this competition what we need to **generate prediction models for player movement during the frames when the ball is in the air.**\n\nBasic steps include:\n\n1. Load and explore data\n2. Data visualization\n3. Preprocess and clean data\n4. Choose the right model\n5. Tune and Optimize\n6. Deploy the model and submit the result\n\n----------------------","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom concurrent.futures import ThreadPoolExecutor, as_completed, ProcessPoolExecutor\nfrom tqdm import tqdm\nimport torch\nimport os, glob","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:33:57.791034Z","iopub.execute_input":"2025-10-25T04:33:57.791430Z","iopub.status.idle":"2025-10-25T04:33:57.799269Z","shell.execute_reply.started":"2025-10-25T04:33:57.791406Z","shell.execute_reply":"2025-10-25T04:33:57.797828Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Set up GPU\nDEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Device:\", DEVICE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:33:57.800743Z","iopub.execute_input":"2025-10-25T04:33:57.801128Z","iopub.status.idle":"2025-10-25T04:33:57.822036Z","shell.execute_reply.started":"2025-10-25T04:33:57.801095Z","shell.execute_reply":"2025-10-25T04:33:57.820637Z"}},"outputs":[{"name":"stdout","text":"Device: cpu\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# congif\nDATA_DIR = \"/kaggle/input/nfl-big-data-bowl-2026-prediction/\"\nTRAIN_PATH = DATA_DIR + '/train'\nWEEKS = list(range(1, 12))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:33:57.823511Z","iopub.execute_input":"2025-10-25T04:33:57.823885Z","iopub.status.idle":"2025-10-25T04:33:57.840202Z","shell.execute_reply.started":"2025-10-25T04:33:57.823852Z","shell.execute_reply":"2025-10-25T04:33:57.839339Z"}},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"# Load data\n\nWith multithread read csv will speed up multiple file opening\n\nThis is from someone else code I will link the source if find the link again","metadata":{}},{"cell_type":"code","source":"def load_weeks_parallel(week_nums, train_path, max_workers=8):\n    def load_week(w):\n        inp = pd.read_csv(train_path + f\"/input_2023_w{w:02d}.csv\")\n        out = pd.read_csv(train_path + f\"/output_2023_w{w:02d}.csv\")\n        return w, inp, out\n\n    inputs, outputs = [], []\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:#multi thread\n        futures = {executor.submit(load_week, w): w for w in week_nums}\n        for future in tqdm(as_completed(futures), total=len(futures), desc=\"Loading weeks\"):#- Uses tqdm to show a progress bar as each thread finishes\n            w, inp, out = future.result()\n            inputs.append(inp)\n            outputs.append(out)\n\n    return pd.concat(inputs, ignore_index=True), pd.concat(outputs, ignore_index=True)\n\ndf_in, df_out = load_weeks_parallel(WEEKS, TRAIN_PATH, max_workers=8)\nprint(f\"Data loaded: {len(df_in)} input rows, {df_in['game_id'].nunique()} games\")\nprint(f\"Data loaded: {len(df_out)} output rows, {df_out['game_id'].nunique()} games\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:33:57.842506Z","iopub.execute_input":"2025-10-25T04:33:57.842860Z","iopub.status.idle":"2025-10-25T04:34:05.084810Z","shell.execute_reply.started":"2025-10-25T04:33:57.842836Z","shell.execute_reply":"2025-10-25T04:34:05.083669Z"}},"outputs":[{"name":"stderr","text":"Loading weeks: 100%|██████████| 11/11 [00:05<00:00,  1.86it/s]\n","output_type":"stream"},{"name":"stdout","text":"Data loaded: 2941176 input rows, 164 games\nData loaded: 336358 output rows, 164 games\n","output_type":"stream"}],"execution_count":17},{"cell_type":"markdown","source":"# Chech first five rows\nCheck what data we are about to handle to know what we should do to preprocess data","metadata":{}},{"cell_type":"code","source":"print(df_in.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:34:05.085873Z","iopub.execute_input":"2025-10-25T04:34:05.086209Z","iopub.status.idle":"2025-10-25T04:34:05.100231Z","shell.execute_reply.started":"2025-10-25T04:34:05.086175Z","shell.execute_reply":"2025-10-25T04:34:05.098931Z"}},"outputs":[{"name":"stdout","text":"      game_id  play_id  player_to_predict  nfl_id  frame_id play_direction  \\\n0  2023101900       78              False   54514         1          right   \n1  2023101900       78              False   54514         2          right   \n2  2023101900       78              False   54514         3          right   \n3  2023101900       78              False   54514         4          right   \n4  2023101900       78              False   54514         5          right   \n\n   absolute_yardline_number     player_name player_height  player_weight  ...  \\\n0                        35  Alontae Taylor           6-0            195  ...   \n1                        35  Alontae Taylor           6-0            195  ...   \n2                        35  Alontae Taylor           6-0            195  ...   \n3                        35  Alontae Taylor           6-0            195  ...   \n4                        35  Alontae Taylor           6-0            195  ...   \n\n          player_role      x      y     s     a     dir       o  \\\n0  Defensive Coverage  38.30  18.62  0.14  0.17  210.10  277.45   \n1  Defensive Coverage  38.31  18.58  0.30  0.25  183.01  278.61   \n2  Defensive Coverage  38.32  18.54  0.36  0.16  172.37  278.61   \n3  Defensive Coverage  38.35  18.55  0.26  0.05  146.71  278.61   \n4  Defensive Coverage  38.38  18.54  0.27  0.05  128.83  278.61   \n\n   num_frames_output  ball_land_x  ball_land_y  \n0                 12    44.080002    47.619999  \n1                 12    44.080002    47.619999  \n2                 12    44.080002    47.619999  \n3                 12    44.080002    47.619999  \n4                 12    44.080002    47.619999  \n\n[5 rows x 23 columns]\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"print(df_in.keys())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:34:05.101367Z","iopub.execute_input":"2025-10-25T04:34:05.102123Z","iopub.status.idle":"2025-10-25T04:34:05.118706Z","shell.execute_reply.started":"2025-10-25T04:34:05.102090Z","shell.execute_reply":"2025-10-25T04:34:05.117829Z"}},"outputs":[{"name":"stdout","text":"Index(['game_id', 'play_id', 'player_to_predict', 'nfl_id', 'frame_id',\n       'play_direction', 'absolute_yardline_number', 'player_name',\n       'player_height', 'player_weight', 'player_birth_date',\n       'player_position', 'player_side', 'player_role', 'x', 'y', 's', 'a',\n       'dir', 'o', 'num_frames_output', 'ball_land_x', 'ball_land_y'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":19},{"cell_type":"markdown","source":"The input data contains tracking data before the pass is thrown\n\n* game_id: Game identifier, unique (numeric)\n* play_id: Play identifier, not unique across games (numeric)\n* player_to_predict: whether or not the x/y prediction for this player will be scored (bool)\n* nfl_id: Player identification number, unique across players (numeric)\n* frame_id: Frame identifier for each play/type, starting at 1 for each game_id/play_id/file type (input or output) (numeric)\n* play_direction: Direction that the offense is moving (left or right)\n* absolute_yardline_number: Distance from end zone for possession team (numeric)\n* player_name: player name (text)\n* player_height: player height (ft-in)\n* player_weight: player weight (lbs)\n* player_birth_date: birth date (yyyy-mm-dd)\n* player_position: the player's position (the specific role on the field that they typically play)\n* player_side: team player is on (Offense or Defense)\n* player_role: role player has on play (Defensive Coverage, Targeted Receiver, Passer or Other Route Runner)\n* x: Player position along the long axis of the field, generally within 0 - 120 yards. (numeric)\n* y: Player position along the short axis of the field, generally within 0 - 53.3 yards. (numeric)\n* s: Speed in yards/second (numeric)\n* a: Acceleration in yards/second^2 (numeric)\n* o: orientation of player (deg)\n* dir: angle of player motion (deg)\n* num_frames_output: Number of frames to predict in output data for the given game_id/play_id/nfl_id. (numeric)\n* ball_land_x: Ball landing position position along the long axis of the field, generally within 0 - 120 yards. (numeric)\n* ball_land_y: Ball landing position along the short axis of the field, generally within 0 - 53.3 yards. (numeric)","metadata":{}},{"cell_type":"code","source":"print(df_out.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:34:05.120019Z","iopub.execute_input":"2025-10-25T04:34:05.120387Z","iopub.status.idle":"2025-10-25T04:34:05.140698Z","shell.execute_reply.started":"2025-10-25T04:34:05.120365Z","shell.execute_reply":"2025-10-25T04:34:05.139605Z"}},"outputs":[{"name":"stdout","text":"      game_id  play_id  nfl_id  frame_id      x      y\n0  2023101900       78   44851         1  45.00  39.84\n1  2023101900       78   44851         2  44.95  40.28\n2  2023101900       78   44851         3  44.86  40.74\n3  2023101900       78   44851         4  44.74  41.24\n4  2023101900       78   44851         5  44.59  41.77\n","output_type":"stream"}],"execution_count":20},{"cell_type":"markdown","source":"The output data contains tracking data after the pass is thrown.\n* game_id: Game identifier, unique (numeric)\n* play_id: Play identifier, not unique across games (numeric)\n* nfl_id: Player identification number, unique across players. (numeric)\n* frame_id: Frame identifier for each play/type, starting at 1 for each game_id/play_id/ file type (input or output). The maximum value for a given game_id, play_id and nfl_id will be the same as the num_frames_output value from the corresponding input file. (numeric)\n* x: Player position along the long axis of the field, generally within 0-120 yards. (TARGET TO PREDICT)\n* y: Player position along the short axis of the field, generally within 0 - 53.3 yards. (TARGET TO PREDICT)","metadata":{}},{"cell_type":"markdown","source":"# Data Visualization and bisic analyze","metadata":{}},{"cell_type":"markdown","source":"There are some feature might not have any infuence to the result such as game_id, play_id, player_name, nfl_id\n\nSo we are going to visualize data and analyze it","metadata":{}},{"cell_type":"code","source":"# Display information about the datasets\nprint(\"Train data shape\")\nprint(df_in.shape)\nprint(\"Test data shape\")\nprint(df_out.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:34:05.141964Z","iopub.execute_input":"2025-10-25T04:34:05.142274Z","iopub.status.idle":"2025-10-25T04:34:05.161990Z","shell.execute_reply.started":"2025-10-25T04:34:05.142228Z","shell.execute_reply":"2025-10-25T04:34:05.161006Z"}},"outputs":[{"name":"stdout","text":"Train data shape\n(2941176, 23)\nTest data shape\n(336358, 6)\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"df_in.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:34:05.164396Z","iopub.execute_input":"2025-10-25T04:34:05.164692Z","iopub.status.idle":"2025-10-25T04:34:06.345391Z","shell.execute_reply.started":"2025-10-25T04:34:05.164669Z","shell.execute_reply":"2025-10-25T04:34:06.344419Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"game_id                     0\nplay_id                     0\nplayer_to_predict           0\nnfl_id                      0\nframe_id                    0\nplay_direction              0\nabsolute_yardline_number    0\nplayer_name                 0\nplayer_height               0\nplayer_weight               0\nplayer_birth_date           0\nplayer_position             0\nplayer_side                 0\nplayer_role                 0\nx                           0\ny                           0\ns                           0\na                           0\ndir                         0\no                           0\nnum_frames_output           0\nball_land_x                 0\nball_land_y                 0\ndtype: int64"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"# Create subplots ball_land_x,ball_land_y\nfig, axs = plt.subplots(1, 5, figsize=(15, 4))  # 1 row, 5 columns\n\naxs[0].hist(df_in['absolute_yardline_number'], bins=20, color='blue', edgecolor='black')\naxs[0].set_title('absolute_yardline_number')\n\naxs[1].hist(df_in['x'], bins=5, color='blue', edgecolor='black')\naxs[1].set_title('x')\n\naxs[2].hist(df_in['y'], bins=20, color='blue', edgecolor='black')\naxs[2].set_title('y')\n\naxs[3].hist(df_in['s'], bins=5, color='blue', edgecolor='black')\naxs[3].set_title('s')\n\naxs[4].hist(df_in['a'], bins=5, color='blue', edgecolor='black')\naxs[4].set_title('a')\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T04:34:06.346669Z","iopub.execute_input":"2025-10-25T04:34:06.347015Z","iopub.status.idle":"2025-10-25T04:34:07.488256Z","shell.execute_reply.started":"2025-10-25T04:34:06.346973Z","shell.execute_reply":"2025-10-25T04:34:07.487213Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x400 with 5 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABdEAAAGGCAYAAACUkchWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACFL0lEQVR4nOzde1wWZf7/8TeggIcADQFRUMtSPCsmYplaJJrrZlmrpknmYTVoU1pNyvC0SVkqlijfDkpuuppt2a66HsLQLVET9ZcaUpaK2wpKCngIUJjfH62Tt3BzUODm8Ho+HvPYZuYzM58Z4Nrxc1/3ddkZhmEIAAAAAAAAAAAUYm/rBAAAAAAAAAAAqKooogMAAAAAAAAAYAVFdAAAAAAAAAAArKCIDgAAAAAAAACAFRTRAQAAAAAAAACwgiI6AAAAAAAAAABWUEQHAAAAAAAAAMAKiugAAAAAAAAAAFhBER0AAAAAAAAAACsoopejuLg42dnZad++fZV63ZYtW+rpp5+u1GtWJydOnJCdnZ3i4uLMbbNmzZKdnZ1FHM/ROjs7O4WFhdk6DQAAAAAAAKDSUUSv5ZYuXWpRXAYAAAAAAAAA/KaOrROAbS1dulTu7u70wJaUkpIie3s+VwIAAAAAAADwGyqGqBEuX758y+dwcnJS3bp1yyEb3IycnBwVFBTYOg0AAAAAAADAAkX0Ujh58qSeffZZtWnTRvXq1dPtt9+uJ554QidOnCgy/vLly/rjH/+o22+/XS4uLho9erTOnz9vEbNv3z4FBwfL3d1d9erVU6tWrfTMM89YxFy6dEkvvPCCfHx85OTkpDZt2ujNN9+UYRjF5lvUeN/Sb2O2X8u7ZcuWOnLkiHbs2CE7OzvZ2dmpb9++ZnxmZqYmT55sXr9169Z6/fXXy1TonDlzpurWrauzZ88W2jdhwgS5ubkpJydHkvTZZ59p0KBB8vb2lpOTk+68807NnTtX+fn5Fsf17dtXHTp0UFJSku6//37Vr19fL730kpnz008/LVdXV7m5uSkkJESZmZmlyvXGMdGvPa+vvvpK4eHhatKkiRo0aKBHH320yPv517/+pd69e6tBgwa67bbbNGjQIB05cqSUT+pXCQkJsrOz00cffaRXX31VzZs3l7Ozsx588EEdO3as2Hyv6du3r8XP8fpzzp49W82aNdNtt92mxx9/XFlZWcrNzdXkyZPl4eGhhg0basyYMcrNzS0yv1WrVqlNmzZydnaWv7+/du7cWSjmp59+0jPPPCNPT085OTmpffv2Wr58eZH3uWbNGs2YMUPNmjVT/fr1lZ2dXabnBVQXv/zyi9q2bau2bdvql19+MbefO3dOTZs2Va9evQq1dQBQWb744gvZ2dnp008/LbRv9erVsrOzU2Jiog0yA4DfXLhwQZMnT1bLli3l5OQkDw8PPfTQQ9q/f7+tUwNQi5W1Zojqi+FcSuHrr7/Wrl27NHz4cDVv3lwnTpzQsmXL1LdvX3377beqX7++RXxYWJjc3Nw0a9YspaSkaNmyZTp58qRZODxz5oz69++vJk2aaPr06XJzc9OJEyf0ySefmOcwDEO///3v9cUXX2js2LHq0qWLtmzZoqlTp+qnn37SokWLbvm+oqOj9dxzz6lhw4Z6+eWXJUmenp6Sfv0goE+fPvrpp5/0xz/+Ub6+vtq1a5ciIiJ0+vRpRUdHl+oaTz31lObMmaO1a9daTEyZl5enjz/+WEOHDpWzs7OkX4vWDRs2VHh4uBo2bKjt27crMjJS2dnZeuONNyzO+/PPP2vgwIEaPny4Ro0aJU9PTxmGoUceeURffvmlJk6cKD8/P3366acKCQm5pef03HPPqVGjRpo5c6ZOnDih6OhohYWFae3atWbMX//6V4WEhCg4OFivv/66Ll++rGXLlum+++7TgQMH1LJlyzJd87XXXpO9vb3+/Oc/KysrS/Pnz9fIkSO1Z8+em76PqKgo1atXT9OnT9exY8f09ttvq27durK3t9f58+c1a9Ys7d69W3FxcWrVqpUiIyMtjt+xY4fWrl2rP/3pT3JyctLSpUs1YMAA7d27Vx06dJAkpaenq2fPnuZEpE2aNNG//vUvjR07VtnZ2Zo8ebLFOefOnStHR0f9+c9/Vm5urhwdHW/6/oCqrF69evrggw9077336uWXX9bChQslSaGhocrKylJcXJwcHBxsnCWA2qpv377y8fHRqlWr9Oijj1rsW7Vqle68804FBgbaKDsA+NXEiRP18ccfKywsTO3atdPPP/+sL7/8UsnJyerWrZut0wNQS5W1ZohqzECJLl++XGhbYmKiIclYuXKluW3FihWGJMPf39/Iy8szt8+fP9+QZHz22WeGYRjGp59+akgyvv76a6vXXL9+vSHJ+Mtf/mKx/fHHHzfs7OyMY8eOmdtatGhhhISEmOszZ840ivrRXsvv+PHj5rb27dsbffr0KRQ7d+5co0GDBsZ3331nsX369OmGg4ODkZqaajX3GwUGBhoBAQEW2z755BNDkvHFF1+Y24p6zn/84x+N+vXrGzk5Oea2Pn36GJKM2NhYi9hrz2z+/PnmtqtXrxq9e/c2JBkrVqwwtxf1jG58jteeV1BQkFFQUGBunzJliuHg4GBkZmYahmEYFy5cMNzc3Izx48dbnC8tLc1wdXUttL04X3zxhSHJ8PPzM3Jzc83tixcvNiQZhw4dsprvNX369LH4mV47Z4cOHSx+L0eMGGHY2dkZAwcOtDg+MDDQaNGihcU2SYYkY9++fea2kydPGs7Ozsajjz5qbhs7dqzRtGlTIyMjw+L44cOHG66urubP+FpOd9xxR5E/d6CmioiIMOzt7Y2dO3ca69atMyQZ0dHRtk4LAIyIiAjDycnJfL8xDMM4c+aMUadOHWPmzJm2SwwA/sfV1dUIDQ21dRoAYKG0NUNUfwznUgr16tUz//vKlSv6+eef1bp1a7m5uRX51bEJEyZYjK09adIk1alTR5s2bZIkubm5SZI2bNigK1euFHnNTZs2ycHBQX/6058str/wwgsyDEP/+te/bvW2irVu3Tr17t1bjRo1UkZGhrkEBQUpPz+/yGE8rBk9erT27NmjH374wdy2atUq+fj4qE+fPua265/zhQsXlJGRod69e+vy5cs6evSoxTmdnJw0ZswYi22bNm1SnTp1NGnSJHObg4ODnnvuuVLnWpQJEyZYDI/Tu3dv5efn6+TJk5Kkbdu2KTMzUyNGjLB4Vg4ODgoICNAXX3xR5muOGTPGold27969JUk//vjjTd/H6NGjLX4vAwICZBhGoWGEAgICdOrUKV29etVie2BgoPz9/c11X19fPfLII9qyZYvy8/NlGIb+/ve/a/DgwTIMw+JZBAcHKysrq9DfS0hIiMXPHajpZs2apfbt2yskJETPPvus+vTpU6idBwBbGD16tHJzc/Xxxx+b29auXaurV69q1KhRNswMAH7l5uamPXv26L///a+tUwEAU1lrhqi+KKKXwi+//KLIyEhzbHB3d3c1adJEmZmZysrKKhR/1113Waw3bNhQTZs2NcdD6tOnj4YOHarZs2fL3d1djzzyiFasWGExDvXJkyfl7e2t2267zeJcfn5+5v6K9P3332vz5s1q0qSJxRIUFCRJOnPmTKnPNWzYMDk5OWnVqlWSpKysLG3YsEEjR460KE4fOXJEjz76qFxdXeXi4qImTZqY/2i78Tk3a9as0NAfJ0+eVNOmTdWwYUOL7W3atCn9jRfB19fXYr1Ro0aSZI5z//3330uSHnjggULPa+vWrWV6VqW95s248Zyurq6SJB8fn0LbCwoKCj3zG3+vJenuu+/W5cuXdfbsWZ09e1aZmZl65513Cj2Hax943PgsWrVqddP3A0s7d+7U4MGD5e3tLTs7O61fv77M5zAMQ2+++abuvvtuOTk5qVmzZnr11VfLP9lazNHRUcuXL9fx48d14cIFrVixosg5LACgsrVt21b33HOP+b4m/drpoWfPnmrdurUNMwMqHu9R1cP8+fN1+PBh+fj4qEePHpo1a9YtdTICqgvaqKqtrDVDVF+MiV4Kzz33nFasWKHJkycrMDBQrq6usrOz0/Dhw8s0yeY1dnZ2+vjjj7V7927985//1JYtW/TMM89owYIF2r17d6Ei8M2cvyhlmbSuoKBADz30kKZNm1bk/rvvvrvU52rUqJF+97vfadWqVYqMjNTHH3+s3Nxci15NmZmZ6tOnj1xcXDRnzhzdeeedcnZ21v79+/Xiiy8Wes6V2XvZ2jjFxv8meL2W21//+ld5eXkViqtTp+x/ZiVdUyr+51zU8dbOWZprlca15zBq1Cir49B36tTJYp1e6OXn0qVL6ty5s5555hk99thjN3WO559/Xlu3btWbb76pjh076ty5czp37lw5Z4otW7ZIknJycvT999/zYRKAKmP06NF6/vnn9Z///Ee5ubnavXu3lixZYuu0gArHe1T18Ic//EG9e/fWp59+qq1bt+qNN97Q66+/rk8++UQDBw60dXpAhaGNqtrKu2aIqosieil8/PHHCgkJ0YIFC8xtOTk5yszMLDL++++/V79+/cz1ixcv6vTp03r44Yct4nr27KmePXvq1Vdf1erVqzVy5EitWbNG48aNU4sWLfT555/rwoULFr3Rrw1r0qJFC6v5Xuu1nJmZaQ4dIxXde91aIfbOO+/UxYsXzZ7nt2r06NF65JFH9PXXX2vVqlXq2rWr2rdvb+5PSEjQzz//rE8++UT333+/uf348eOlvkaLFi0UHx+vixcvWnwQkZKSUi73YM2dd94pSfLw8Ci351UajRo1KvJ38OTJk7rjjjvK/XrXetxf77vvvlP9+vXVpEkTSdJtt92m/Pz8Sn0O+NXAgQOL/cdDbm6uXn75Zf3tb39TZmamOnTooNdff119+/aVJCUnJ2vZsmU6fPiw+e0Nirvl75tvvtGcOXM0ZswYHTx4UOPGjdOhQ4fMb4YAgC0NHz5c4eHh+tvf/qZffvlFdevW1bBhw2ydFlDheI+qPpo2bapnn31Wzz77rM6cOaNu3brp1VdfpYiOGo02qmora80Q1RfDuZSCg4NDoV65b7/9ttWe3e+8847FWOfLli3T1atXzUbv/Pnzhc7XpUsXSTKHdHn44YeVn59fqPfPokWLZGdnV2wDeq2oe/245ZcuXdIHH3xQKLZBgwZF/mH/4Q9/UGJiotlj8nqZmZmFxssuycCBA+Xu7q7XX39dO3bsKDS25rXe0Nc/l7y8PC1durTU13j44Yd19epVLVu2zNyWn5+vt99+u0y5llVwcLBcXFw0b968Ise4P3v2bIVc984779Tu3buVl5dnbtuwYYNOnTpVIddLTEy0GM/r1KlT+uyzz9S/f385ODjIwcFBQ4cO1d///ncdPny40PEV9RxQOmFhYUpMTNSaNWv0zTff6IknntCAAQPMD0f++c9/6o477tCGDRvUqlUrtWzZUuPGjaN3Qjm6cuWKnn76aXl7e2vx4sWKi4tTenq6pkyZYuvUAECS5O7uroEDB+rDDz/UqlWrNGDAALm7u9s6LcDmeI+yvfz8/ELDInh4eMjb29tiWFSgNqKNsq2y1gxRfdETvRR+97vf6a9//atcXV3Vrl07JSYm6vPPP9ftt99eZHxeXp4efPBB/eEPf1BKSoqWLl2q++67T7///e8lSR988IGWLl2qRx99VHfeeacuXLigd999Vy4uLmZv9cGDB6tfv356+eWXdeLECXXu3Flbt27VZ599psmTJ5uF8qL0799fvr6+Gjt2rKZOnSoHBwctX75cTZo0UWpqqkWsv7+/li1bpr/85S9q3bq1PDw89MADD2jq1Kn6xz/+od/97nd6+umn5e/vr0uXLunQoUP6+OOPdeLEiTL9o6pu3boaPny4lixZIgcHB40YMcJif69evdSoUSOFhIToT3/6k+zs7PTXv/61TEOKDB48WPfee6+mT5+uEydOqF27dvrkk08qfAwqFxcXLVu2TE899ZS6deum4cOHm89648aNuvfeeyvkq9Djxo3Txx9/rAEDBugPf/iDfvjhB3344YfF/m7cig4dOig4OFh/+tOf5OTkZH7AMXv2bDPmtdde0xdffKGAgACNHz9e7dq107lz57R//359/vnn/J+0jaSmpmrFihVKTU2Vt7e3JOnPf/6zNm/erBUrVmjevHn68ccfdfLkSa1bt04rV65Ufn6+pkyZoscff1zbt2+38R3UDH/5y1908OBBxcfH67bbblOnTp0UGRmpGTNm6PHHHy/0bSUAsIXRo0fr8ccflyTNnTvXxtkAtsd7VNVw4cIFNW/eXI8//rg6d+6shg0b6vPPP9fXX39t0fsTqG1oo2yvrDVDVF8U0Uth8eLFcnBw0KpVq5STk6N7771Xn3/+uYKDg4uMX7JkiTn+95UrVzRixAi99dZb5tApffr00d69e7VmzRqlp6fL1dVVPXr00KpVq8yv1Njb2+sf//iHIiMjtXbtWq1YsUItW7bUG2+8oRdeeKHYfOvWratPP/1Uzz77rF555RV5eXlp8uTJatSokTnB4zWRkZE6efKk5s+frwsXLqhPnz564IEHVL9+fe3YsUPz5s0zG1oXFxfdfffdmj179k0NPTB69GgtWbJEDz74oJo2bWqx7/bbb9eGDRv0wgsvaMaMGWrUqJFGjRqlBx980OpzvtG1ZzZ58mR9+OGHsrOz0+9//3stWLBAXbt2LXO+ZfHkk0/K29tbr732mt544w3l5uaqWbNm6t27d6FnXl6Cg4O1YMECLVy4UJMnT1b37t3NZ1gR+vTpo8DAQM2ePVupqalq166d4uLiLMY59/T01N69ezVnzhx98sknWrp0qW6//Xa1b99er7/+eoXkhZIdOnRI+fn5heYyyM3NNf+PvaCgQLm5uVq5cqUZ9/7778vf318pKSm3PEFvbbd//37NmzdPYWFhFsN9TZ8+XZ999pnGjx+vI0eOWAzBBQC2MHjwYDVq1EgFBQVmBxCgNuM9qmqoX7++nn32WW3dulWffPKJCgoK1Lp1ay1dulSTJk2ydXqAzdBG2V5Za4aovuyMss4eCNyk//f//p+6dOmilStX6qmnnrJ1OkCNZWdnp08//VRDhgyRJK1du1YjR47UkSNHCk0k27BhQ3l5eWnmzJmFhiT65ZdfVL9+fW3dulUPPfRQZd4CAMBGrl69Km9vbw0ePFjvv/++rdMBKh3vUQCqMtoowHboiY5K8+6776phw4Y3PZs0gJvTtWtX5efn68yZM+rdu3eRMffee6+uXr2qH374wRwS6LvvvpNU/ETGAICaZf369Tp79qxGjx5t61SAKoH3KABVGW0UUHnoiY6bdu7cOYtJLW/k4OCgJk2a6J///Ke+/fZbvfLKKwoLC9PChQsrMcuqIS8vr8TxwF1dXVWvXr1Kygg1zcWLF3Xs2DFJv75ILVy4UP369VPjxo3l6+urUaNG6auvvjKHNzp79qzi4+PVqVMnDRo0SAUFBbrnnnvUsGFDRUdHq6CgQKGhoXJxcdHWrVttfHcAgIq2Z88effPNN5o7d67c3d0tJhMHajreowBUZbRRQBVhADepT58+hiSrS4sWLQzDMIwWLVoYzs7OxiOPPGJkZ2fbNmkb+eKLL4p9VpKMFStW2DpNVGPWfsdCQkIMwzCMvLw8IzIy0mjZsqVRt25do2nTpsajjz5qfPPNN+Y5fvrpJ+Oxxx4zGjZsaHh6ehpPP/208fPPP9vojgAAlSkkJMRwcHAw/P39jUOHDtk6HaBS8R4FoCqjjQKqBnqi46YlJSXp/PnzVvfXq1dP9957byVmVHWdP39eSUlJxca0b9++0ISrAAAAAAAAAGyLIjoAAAAAAAAAAFbY2zoBAAAAAAAAoCqKiorSPffco9tuu00eHh4aMmSIUlJSij0mLi5OdnZ2Fouzs3MlZQygItQpS3BUVJQ++eQTHT16VPXq1VOvXr30+uuvq02bNmZM3759tWPHDovj/vjHPyo2NtZcT01N1aRJk/TFF1+oYcOGCgkJUVRUlOrU+S2dhIQEhYeH68iRI/Lx8dGMGTP09NNPW5w3JiZGb7zxhtLS0tS5c2e9/fbb6tGjh7k/JydHL7zwgtasWaPc3FwFBwdr6dKl8vT0LNX9FhQU6L///a9uu+022dnZleVRASgjwzB04cIFeXt7y96ez/dKgzYKqDy0UWVHGwVUHtqosqONAipPdW+jduzYodDQUN1zzz26evWqXnrpJfXv31/ffvutGjRoYPU4FxcXi2J7Wdoa2iig8pS6jSrLAOrBwcHGihUrjMOHDxsHDx40Hn74YcPX19e4ePGiGdOnTx9j/PjxxunTp80lKyvL3H/16lWjQ4cORlBQkHHgwAFj06ZNhru7uxEREWHG/Pjjj0b9+vWN8PBw49tvvzXefvttw8HBwdi8ebMZs2bNGsPR0dFYvny5ceTIEWP8+PGGm5ubkZ6ebsZMnDjR8PHxMeLj4419+/YZPXv2NHr16lXq+z116lSJk0GysLCU73Lq1KmyNEu1Gm0UC0vlL7RRpUcbxcJS+QttVOnRRrGwVP5SU9qoM2fOGJKMHTt2WI1ZsWKF4erqetPXoI1iYan8paQ26pbGRD979qw8PDy0Y8cO3X///ZJ+7YnepUsXRUdHF3nMv/71L/3ud7/Tf//7X7NHeGxsrF588UWdPXtWjo6OevHFF7Vx40YdPnzYPG748OHKzMzU5s2bJUkBAQG65557tGTJEkm/fkrn4+Oj5557TtOnT1dWVpaaNGmi1atX6/HHH5ckHT16VH5+fkpMTFTPnj1LvL+srCy5ubnp1KlTcnFxudnHBKAUsrOz5ePjo8zMTLm6uto6nWqBNgqoPLRRZUcbBVQe2qiyo40CKk9Na6OOHTumu+66S4cOHVKHDh2KjImLi9O4cePUrFkzFRQUqFu3bpo3b57at29fZHxubq5yc3PN9aysLPn6+tJGAZWgtG1UmYZzuVFWVpYkqXHjxhbbV61apQ8//FBeXl4aPHiwXnnlFdWvX1+SlJiYqI4dO1oMqRIcHKxJkybpyJEj6tq1qxITExUUFGRxzuDgYE2ePFmSlJeXp6SkJEVERJj77e3tFRQUpMTERElSUlKSrly5YnGetm3bytfX12oR/cZG68KFC5J+/QoOjRZQOfiqWulde1a0UUDloY0qPdoooPLRRpUebRRQ+WpCG1VQUKDJkyfr3nvvtVpAl6Q2bdpo+fLl6tSpk7KysvTmm2+qV69eOnLkiJo3b14oPioqSrNnzy60nTYKqDwltVE3XUS31nA8+eSTatGihby9vfXNN9/oxRdfVEpKij755BNJUlpaWqExya+tp6WlFRuTnZ2tX375RefPn1d+fn6RMUePHjXP4ejoKDc3t0Ix165zI2uNFgAAAAAAAGq30NBQHT58WF9++WWxcYGBgQoMDDTXe/XqJT8/P/3f//2f5s6dWyg+IiJC4eHh5vq1nrEAqo6bLqJbazgmTJhg/nfHjh3VtGlTPfjgg/rhhx9055133nymlYBGCwAAAAAAADcKCwvThg0btHPnziJ7kxenbt266tq1q44dO1bkficnJzk5OZVHmgAqyE1Ni3yt4fjiiy9KbDgCAgIkyWwovLy8lJ6ebhFzbd3Ly6vYGBcXF9WrV0/u7u5ycHAoMub6c+Tl5SkzM9NqzI2cnJzMr8rwlRkAAFCeli1bpk6dOpnvGIGBgfrXv/5l7s/JyVFoaKhuv/12NWzYUEOHDi30rpOamqpBgwapfv368vDw0NSpU3X16lWLmISEBHXr1k1OTk5q3bq14uLiCuUSExOjli1bytnZWQEBAdq7d6/F/tLkAgAAUBsYhqGwsDB9+umn2r59u1q1alXmc+Tn5+vQoUNq2rRpBWQIoDKUqYh+Mw3HwYMHJclsKAIDA3Xo0CGdOXPGjNm2bZtcXFzUrl07MyY+Pt7iPNu2bTO/CuPo6Ch/f3+LmIKCAsXHx5sx/v7+qlu3rkVMSkqKUlNTLb5SAwDlYefOnRo8eLC8vb1lZ2en9evXl3hMaQpdAGqO5s2b67XXXlNSUpL27dunBx54QI888oiOHDkiSZoyZYr++c9/at26ddqxY4f++9//6rHHHjOPz8/P16BBg5SXl6ddu3bpgw8+UFxcnCIjI82Y48ePa9CgQerXr58OHjyoyZMna9y4cdqyZYsZs3btWoWHh2vmzJnav3+/OnfurODgYIt3s5JyAQAAqC1CQ0P14YcfavXq1brtttuUlpamtLQ0/fLLL2bM6NGjLebtmzNnjrZu3aoff/xR+/fv16hRo3Ty5EmNGzfOFrcAoDwYZTBp0iTD1dXVSEhIME6fPm0uly9fNgzDMI4dO2bMmTPH2Ldvn3H8+HHjs88+M+644w7j/vvvN89x9epVo0OHDkb//v2NgwcPGps3bzaaNGliREREmDE//vijUb9+fWPq1KlGcnKyERMTYzg4OBibN282Y9asWWM4OTkZcXFxxrfffmtMmDDBcHNzM9LS0syYiRMnGr6+vsb27duNffv2GYGBgUZgYGCp7zcrK8uQZGRlZZXlMQG4CdX9723Tpk3Gyy+/bHzyySeGJOPTTz8tNv5aOxceHm58++23xttvv12onStJdX9mQHVSUX9vjRo1Mt577z0jMzPTqFu3rrFu3TpzX3JysiHJSExMNAzj13bG3t7e4l1n2bJlhouLi5Gbm2sYhmFMmzbNaN++vcU1hg0bZgQHB5vrPXr0MEJDQ831/Px8w9vb24iKijIMwyhVLqVBGwVUHv7eyo5nBlSe6v73JqnIZcWKFWZMnz59jJCQEHN98uTJhq+vr+Ho6Gh4enoaDz/8sLF///5SX7O6PzOgOint31uZiuglNRypqanG/fffbzRu3NhwcnIyWrdubUydOrVQEidOnDAGDhxo1KtXz3B3dzdeeOEF48qVKxYxX3zxhdGlSxfD0dHRuOOOOywap2vefvtts1Hq0aOHsXv3bov9v/zyi/Hss88ajRo1MurXr288+uijxunTp0t9vzRaQOWpSX9vpSmil6bQVZKa9MyAqq68/96uXr1q/O1vfzMcHR2NI0eOGPHx8YYk4/z58xZxvr6+xsKFCw3DMIxXXnnF6Ny5s8X+H3/80ZBk/qOsd+/exvPPP28Rs3z5csPFxcUwDMPIzc01HBwcCrVRo0ePNn7/+98bhmGUKpfSoI0CKk91/3vbsWOH8bvf/c5o2rRpqd6jrvfll18aDg4OhdrHklT3ZwZUJ/y9lR3PDKg8pf17K9PEooZhFLvfx8dHO3bsKPE8LVq00KZNm4qN6du3rw4cOFBsTFhYmMLCwqzud3Z2VkxMjGJiYkrMCQAqU2JiooKCgiy2BQcHa/LkyVaPyc3NVW5urrmenZ1dUekBqCCHDh1SYGCgcnJy1LBhQ3366adq166dDh48KEdHR7m5uVnEe3p6Ki0tTZKUlpYmT0/PQvuv7SsuJjs7W7/88ovOnz+v/Pz8ImOOHj1qnqOkXIpCGwXgZl26dEmdO3fWM888U6ahozIzMzV69Gg9+OCDzNsAAAAqVJmK6ACA8lFSoatevXqFjomKitLs2bMrK0UAFaBNmzY6ePCgsrKy9PHHHyskJKRUHRCqA9ooADdr4MCBGjhwYJmPmzhxop588kk5ODiUaj4aAACAm1WmiUUBALYTERGhrKwsczl16pStUwJQRo6OjmrdurX8/f0VFRWlzp07a/HixfLy8lJeXp4yMzMt4tPT0+Xl5SVJ8vLyKtTT8tp6STEuLi6qV6+e3N3d5eDgUGTM9ecoKZei0EYBqEwrVqzQjz/+qJkzZ5YqPjc3V9nZ2RYLAABAaVFEBwAbKKnQVRQnJye5uLhYLACqt4KCAuXm5srf319169ZVfHy8uS8lJUWpqakKDAyUJAUGBurQoUM6c+aMGbNt2za5uLioXbt2Zsz157gWc+0cjo6O8vf3t4gpKChQfHy8GVOaXIpCGwWgsnz//feaPn26PvzwQ9WpU7ovV0dFRcnV1dVcfHx8KjhLAABQkzCcCwDYQGBgYKG5Ia4vdAGoeSIiIjRw4ED5+vrqwoULWr16tRISErRlyxa5urpq7NixCg8PV+PGjeXi4qLnnntOgYGB6tmzpySpf//+ateunZ566inNnz9faWlpmjFjhkJDQ+Xk5CTp16ENlixZomnTpumZZ57R9u3b9dFHH2njxo1mHuHh4QoJCVH37t3Vo0cPRUdH69KlSxozZowklSoXALCV/Px8Pfnkk5o9e7buvvvuUh8XERGh8PBwcz07O5tCOgAAKDWK6ABQDi5evKhjx46Z68ePH9fBgwfVuHFj+fr6KiIiQj/99JNWrlwpqXSFLgA1y5kzZzR69GidPn1arq6u6tSpk7Zs2aKHHnpIkrRo0SLZ29tr6NChys3NVXBwsJYuXWoe7+DgoA0bNmjSpEkKDAxUgwYNFBISojlz5pgxrVq10saNGzVlyhQtXrxYzZs313vvvafg4GAzZtiwYTp79qwiIyOVlpamLl26aPPmzRbzNJSUCwDYyoULF7Rv3z4dOHBAYWFhkn79Ro1hGKpTp462bt2qBx54oNBxTk5O5geOAAAAZWVnGIZh6ySqquzsbLm6uiorK6vafyU5NTVVGRkZJca5u7vL19e3EjICLFX3v7eEhAT169ev0PaQkBDFxcXp6aef1okTJ5SQkGBxzJQpU/Ttt9+qefPmeuWVV/T000+X+prV/ZlVJ6VtQ22Ftrvi8fdWdjyzmo/3y6qjJv292dnZ6dNPP9WQIUOK3F9QUKBvv/3WYtvSpUu1fft2ffzxx2rVqpUaNGhQ4nXK8sx4DwBuTU1qoyoLbRRQeUr790ZP9FogNTVVbdr4KSfncomxzs71lZKSTAMHlFHfvn1V3GeScXFxRR5z4MCBCswK5aEsbait0HYDqGy8X6I8leUbffb29urQoYPF8R4eHnJ2di60vTzwHgCgKqONAioPRfRaICMj438N6oeS/IqJTFZOzihlZGTQuAHA/5S+DbUV2m4AlY/3S5Snffv2WXyj79rY5de+0Xf69GmlpqbaJDfeAwBUZbRRQOWhiF6r+EnqZuskAKCaog0FgMJoG3HrbuYbfdebNWuWZs2aVb5JFcLvOoCqjDYKqGj2tk4AAAAAAAAAAICqip7oAAAAQDXGBJ8AAABAxaKIDgAAAFRTTPAJAAAAVDyK6AAAAEA1xQSfAAAAQMWjiA4AAABUe0woBgAAAFQUJhYFAAAAAAAAAMAKiugAAAAAAAAAAFhBER0AAAAAAAAAACsoogMAAAAAAAAAYAVFdAAAAAAAAAAArKCIDgAAAAAAAACAFXVsnQAA61JTU5WRkVFinLu7u3x9fSshIwAAAAAAAKB2oYgOVFGpqalq08ZPOTmXS4x1dq6vlJRkCukAAAAAAABAOaOIDlRRGRkZ/yugfyjJr5jIZOXkjFJGRgZFdAAAAAAAAKCcUUQHqjw/Sd1snQQAAAAAAABQKzGxKAAAAAAAAAAAVlBEBwAAAAAAAADACoroAAAAAAAAAABYQREdAAAAAAAAAAArKKIDAAAAAAAAAGAFRXQAAAAAAAAAAKygiA4AAAAAAAAAgBUU0QEAAAAAAAAAsIIiOgAAAAAAAAAAVlBEBwAAAAAAAADACoroAAAAAAAAAABYQREdAAAAAAAAAAArKKIDAAAAAAAAAGAFRXQAAAAAAAAAAKygiA4AAAAAAAAAgBUU0QEAAAAAAAAAsIIiOgAAAAAAAAAAVlBEBwAAAAAAAADACoroAAAAAACb2blzpwYPHixvb2/Z2dlp/fr1xcZ/8skneuihh9SkSRO5uLgoMDBQW7ZsqZxkAQBArUQRHQAAAABgM5cuXVLnzp0VExNTqvidO3fqoYce0qZNm5SUlKR+/fpp8ODBOnDgQAVnCgAAaqs6tk4AAAAAAFB7DRw4UAMHDix1fHR0tMX6vHnz9Nlnn+mf//ynunbtWs7ZAQAA0BMdAAAAAFCNFRQU6MKFC2rcuLGtUwEAADUUPdEBAAAAANXWm2++qYsXL+oPf/iD1Zjc3Fzl5uaa69nZ2ZWRGgAAqCHoiQ4AAAAAqJZWr16t2bNn66OPPpKHh4fVuKioKLm6upqLj49PJWYJAACqO4roAAAAlSAqKkr33HOPbrvtNnl4eGjIkCFKSUmxiOnbt6/s7OwslokTJ1rEpKamatCgQapfv748PDw0depUXb161SImISFB3bp1k5OTk1q3bq24uLhC+cTExKhly5ZydnZWQECA9u7da7E/JydHoaGhuv3229WwYUMNHTpU6enp5fMwAKAcrFmzRuPGjdNHH32koKCgYmMjIiKUlZVlLqdOnaqkLAEAQE1AER0AAKAS7NixQ6Ghodq9e7e2bdumK1euqH///rp06ZJF3Pjx43X69GlzmT9/vrkvPz9fgwYNUl5ennbt2qUPPvhAcXFxioyMNGOOHz+uQYMGqV+/fjp48KAmT56scePGacuWLWbM2rVrFR4erpkzZ2r//v3q3LmzgoODdebMGTNmypQp+uc//6l169Zpx44d+u9//6vHHnusAp8QAJTe3/72N40ZM0Z/+9vfNGjQoBLjnZyc5OLiYrEAAACUFmOiAwAAVILNmzdbrMfFxcnDw0NJSUm6//77ze3169eXl5dXkefYunWrvv32W33++efy9PRUly5dNHfuXL344ouaNWuWHB0dFRsbq1atWmnBggWSJD8/P3355ZdatGiRgoODJUkLFy7U+PHjNWbMGElSbGysNm7cqOXLl2v69OnKysrS+++/r9WrV+uBBx6QJK1YsUJ+fn7avXu3evbsWe7PB0DtdfHiRR07dsxcP378uA4ePKjGjRvL19dXERER+umnn7Ry5UpJvw7hEhISosWLFysgIEBpaWmSpHr16snV1dUm9wAAAGo2eqIDAADYQFZWliSpcePGFttXrVold3d3dejQQREREbp8+bK5LzExUR07dpSnp6e5LTg4WNnZ2Tpy5IgZc+OwBsHBwUpMTJQk5eXlKSkpySLG3t5eQUFBZkxSUpKuXLliEdO2bVv5+vqaMTfKzc1Vdna2xQIApbFv3z517dpVXbt2lSSFh4era9eu5rdsTp8+rdTUVDP+nXfe0dWrVxUaGqqmTZuay/PPP2+T/AEAQM1HER0AAKCSFRQUaPLkybr33nvVoUMHc/uTTz6pDz/8UF988YUiIiL017/+VaNGjTL3p6WlWRTQJZnr13piWovJzs7WL7/8ooyMDOXn5xcZc/05HB0d5ebmZjXmRkzaB+Bm9e3bV4ZhFFquzecQFxenhIQEMz4hIaHYeAAoT6WZ16Yo69atU9u2beXs7KyOHTtq06ZNlZAtgIpSpiJ6aRqO0kxCxYRYAACgNgsNDdXhw4e1Zs0ai+0TJkxQcHCwOnbsqJEjR2rlypX69NNP9cMPP9go09Jj0j4AAFATlXZem+vt2rVLI0aM0NixY3XgwAENGTJEQ4YM0eHDhysxcwDlqUxjol9rOO655x5dvXpVL730kvr3769vv/1WDRo0kPTrJFQbN27UunXr5OrqqrCwMD322GP66quvJP02IZaXl5d27dql06dPa/To0apbt67mzZsn6bcJsSZOnKhVq1YpPj5e48aNU9OmTc2xPK9NiBUbG6uAgABFR0crODhYKSkp8vDwKFUuQGmlpqYqIyOjxDh3d3f5+vpWQkYAgOoqLCxMGzZs0M6dO9W8efNiYwMCAiRJx44d05133ikvL69CnQaudRC4No66l5dXoU4D6enpcnFxUb169eTg4CAHB4ciY64/R15enjIzMy16o18fcyMnJyc5OTmVcPeQeK8AAKA6Ke28NtdbvHixBgwYoKlTp0qS5s6dq23btmnJkiWKjY2t8JwBlL8yFdFLajhKMwkVE2KhuklNTVWbNn7KyblcYqyzc32lpCTzD14AQCGGYei5557Tp59+qoSEBLVq1arEYw4ePChJatq0qSQpMDBQr776qs6cOWN2Gti2bZtcXFzUrl07M+bGrwtv27ZNgYGBkiRHR0f5+/srPj5eQ4YMkfTr8DLx8fEKCwuTJPn7+6tu3bqKj4/X0KFDJUkpKSlKTU01z4Obw3uFdXy4AACoDqzNa3O9xMREhYeHW2wLDg7W+vXrKzI1ABWoTEX0G93YcJQ0CVXPnj2tTog1adIkHTlyRF27drU6IdbkyZMl/TYhVkREhLm/rBNiFVVEz83NVW5urrnOhFiQpIyMjP/9Q/dDSX7FRCYrJ2eUMjIy+IcdAKCQ0NBQrV69Wp999pluu+02c2xxV1dX1atXTz/88INWr16thx9+WLfffru++eYbTZkyRffff786deokSerfv7/atWunp556SvPnz1daWppmzJih0NBQsxf4xIkTtWTJEk2bNk3PPPOMtm/fro8++kgbN240cwkPD1dISIi6d++uHj16KDo6WpcuXTI7J7i6umrs2LEKDw9X48aN5eLioueee06BgYF0RLhFvFcUjQ8XAADVgbV5bW5kbY4aa3PLUI8Cqr6bLqIX1XCUZhKq8pgQ6/z581YnxDp69Gipc7lRVFSUZs+eXcongJqgND2ekpOT//dffpK6VXhOAICaadmyZZJ+nUDveitWrNDTTz8tR0dHff7552ZB28fHR0OHDtWMGTPMWAcHB23YsEGTJk1SYGCgGjRooJCQEM2ZM8eMadWqlTZu3KgpU6Zo8eLFat68ud577z3z23ySNGzYMJ09e1aRkZFKS0tTly5dtHnzZot3q0WLFsne3l5Dhw5V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6+9//1hNmza1GsNE6ShPFy9e1LFjx8z148eP6+DBg2rcuLF8fX0VERGhn376SStXrpQkTZw4UUuWLNG0adP0zDPPaPv27froo4+0ceNGW90CAACo4SiiAwAAADVepko3d8u/lZsbrt/97neVkhUgSfv27VO/fv3M9Wtjl4eEhCguLk6nT59Wamqqub9Vq1bauHGjpkyZosWLF6t58+Z67733FBwcXOm5AwCA2oEiOgAAAFBrlGbuFiZKR+Xq27evDMOwuj8uLq7IYw4cOFCBWQEAAPyGIjoAAACAGzBROgAAAHCNva0TAAAAAAAAAACgqqKIDgAAUAmioqJ0zz336LbbbpOHh4eGDBmilJQUi5icnByFhobq9ttvV8OGDTV06FClp6dbxKSmpmrQoEGqX7++PDw8NHXqVF29etUiJiEhQd26dZOTk5Nat25d5FAIMTExatmypZydnRUQEKC9e/eWORcAAAAAqA0oogMAAFSCHTt2KDQ0VLt379a2bdt05coV9e/fX5cuXTJjpkyZon/+859at26dduzYof/+97967LHHzP35+fkaNGiQ8vLytGvXLn3wwQeKi4tTZGSkGXP8+HENGjRI/fr108GDBzV58mSNGzdOW7ZsMWPWrl2r8PBwzZw5U/v371fnzp0VHBysM2fOlDoXAAAAAKgtGBMdAACgEmzevNliPS4uTh4eHkpKStL999+vrKwsvf/++1q9erUeeOABSdKKFSvk5+en3bt3q2fPntq6dau+/fZbff755/L09FSXLl00d+5cvfjii5o1a5YcHR0VGxurVq1aacGCBZIkPz8/ffnll1q0aJGCg4MlSQsXLtT48eM1ZswYSVJsbKw2btyo5cuXa/r06aXKBQBQdSQnV915Ctzd3eXr62vrNAAAuCUU0QEAAGwgKytLktS4cWNJUlJSkq5cuaKgoCAzpm3btvL19VViYqJ69uypxMREdezYUZ6enmZMcHCwJk2apCNHjqhr165KTEy0OMe1mMmTJ0uS8vLylJSUpIiICHO/vb29goKClJiYWOpcAABVwWlJ9ho1apStE7HK2bm+UlKSKaQDAKo1iugAAACVrKCgQJMnT9a9996rDh06SJLS0tLk6OgoNzc3i1hPT0+lpaWZMdcX0K/tv7avuJjs7Gz98ssvOn/+vPLz84uMOXr0aKlzuVFubq5yc3PN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7hS/iZ5ELl++LEnKzs4OW//888+Vk5Oj+fPn66233tLIyIgb5cV0/vx55efnq7i4WHV1derr65MkdXR06MaNG6qurnbOffzxx1VQUKDW1la3yo3L6OioPvvsM7344otKS0tz1pOlJ7fq7e3VwMBAWB/mzp2riooKpw+tra3y+XxavHixc051dbVmzJihtra2aa8ZkY2OjqqjoyOsnzNmzFB1dXXCP1eJIhUzy23kDMimO3f7/EcGTay+vl4rV64Muy8S9wuTR15NXaRZCvGLZ3aCN3kpo7yYJV579pubm5Wbm6t58+Zp8+bNGhoacrukCaW7XQDiEwqFtHXrVj311FOaP3++s/7888+rsLBQ+fn5OnPmjLZt26auri599dVXLlY7XkVFhfbu3at58+apv79f7777rp5++mmdPXtWAwMDyszMlM/nC/uevLw8DQwMuFNwnL7++msFg0GtX7/eWUuWntzu33udl5cXtn5rHwYGBpSbmxt2PD09XdnZ2QnfK6/566+/NDY2NmE/f/31V5eqSh6pmlluI2dANt2ZieY/Mmi8/fv369SpU2pvbx93jPuFySKvpibaLHX//fe7XV7SiGd2gjd5JaO8miVeevZramq0evVqFRUVqaenR2+//bZqa2vV2tqqmTNnul1eGDbRk0R9fb3Onj077rOfbv2M2AULFigQCKiqqko9PT0qKSmZ7jIjqq2tdb4uKytTRUWFCgsL9eWXX2r27NkuVjY1n376qWpra5Wfn++sJUtPAESWqpkFILlEmv9w02+//aaGhgY1NjZq1qxZbpcD4P+izVIbNmxwsTIAyYQsSX3PPfec8/WCBQtUVlamkpISNTc3q6qqysXKxuPjXJLAli1bdPjwYR07dkwPP/xw1HMrKiokSd3d3dNR2qT5fD499thj6u7ult/v1+joqILBYNg5Fy9elN/vd6fAOFy4cEFHjhzRSy+9FPW8ZOnJv/f64sWLYeu39sHv94/7IyX//POPLl26lNC98qKcnBzNnDkzaj8Rv1TIrERAzoBsil+k+Y8MCtfR0aHBwUEtXLhQ6enpSk9PV0tLi3bt2qX09HTl5eVxvzAp5NXddesshfjFMzvBm7yaUV7JEi8/+8XFxcrJyUnIHrOJnsDMTFu2bNHBgwfV1NSkoqKimN9z+vRpSVIgEPiPq5uaK1euqKenR4FAQIsWLVJGRoaOHj3qHO/q6lJfX58qKytdrDK6PXv2KDc3VytXrox6XrL0pKioSH6/P6wPf//9t9ra2pw+VFZWKhgMqqOjwzmnqalJoVDI+WEBEkNmZqYWLVoU1s9QKKSjR48m9HOVqFIhsxIBOQOyKbZY8x8ZFK6qqko//fSTTp8+7bwWL16suro652vuFyaDvLq7bp2lEL94Zid4k1czyitZ4uVn//fff9fQ0FBi9tjtv2yKyDZv3mxz58615uZm6+/vd14jIyNmZtbd3W3vvfeenTx50np7e+3QoUNWXFxsS5cudbny8V5//XVrbm623t5e++GHH6y6utpycnJscHDQzMxefvllKygosKamJjt58qRVVlZaZWWly1VHNjY2ZgUFBbZt27aw9UTvyfDwsHV2dlpnZ6dJsg8//NA6OzvtwoULZma2Y8cO8/l8dujQITtz5oytWrXKioqK7Nq1a86/UVNTY08++aS1tbXZ8ePHrbS01NauXevWJSGK/fv3W1ZWlu3du9fOnTtnmzZtMp/PZwMDA26XlvBSLbOmEzmDWMim6GLNf2ZkUCzLli2zhoYG5z33C5NFXk1erFkKN92N2Qne5IWMSuUs8cqzH+06h4eH7Y033rDW1lbr7e21I0eO2MKFC620tNSuX7/udunjsImewCRN+NqzZ4+ZmfX19dnSpUstOzvbsrKy7NFHH7U333zTLl++7G7hE1izZo0FAgHLzMy0hx56yNasWWPd3d3O8WvXrtkrr7xiDzzwgN1zzz32zDPPWH9/v4sVR/fdd9+ZJOvq6gpbT/SeHDt2bML/U+vWrTMzs1AoZO+8847l5eVZVlaWVVVVjbvGoaEhW7t2rd133302Z84ce+GFF2x4eNiFq0E8PvroIysoKLDMzExbsmSJnThxwu2SkkKqZdZ0ImcQD7IpsljznxkZFMvtm+jcL0wFeTU5sWYp3HQ3Zid4V6pnVCpniVee/WjXOTIyYsuXL7cHH3zQMjIyrLCw0DZu3JiwPwhKMzP7j37JHQAAAAAAAACApMZnogMAAAAAAAAAEAGb6AAAAAAAAAAARMAmOgAAAAAAAAAAEbCJDgAAAAAAAABABGyiAwAAAAAAAAAQAZvoAAAAAAAAAABEwCY6AAAAAAAAAAARsIkOAAAAAAAAAEAEbKIDAAAAAAAAABABm+gAAAAAAAAAAETAJjoAAAAAAAAAABGwiQ4AAAAAAAAAQAT/AwLolOcUEU6kAAAAAElFTkSuQmCC\n"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}